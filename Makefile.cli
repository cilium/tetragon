# SPDX-License-Identifier: Apache-2.0
# Copyright Authors of Tetragon

CLI_GO_BUILD = CGO_ENABLED=0 $(GO) build
# renovate: datasource=docker
GO_IMAGE = docker.io/library/golang:1.23.4-alpine@sha256:6c5c9590f169f77c8046e45c611d3b28fe477789acd8d3762d23d4744de69812
TARGET=tetra

RELEASE_UID ?= $(shell id -u)
RELEASE_GID ?= $(shell id -g)

##@ CLI

.PHONY: cli-release
cli-release: ## Compile tetra CLI release binaries.
	docker run \
		--rm \
		--workdir /tetragon \
		--volume `pwd`:/tetragon $(GO_IMAGE) \
		sh -c "apk add --no-cache make git setpriv && \
		        /usr/bin/setpriv --reuid=$(RELEASE_UID) --regid=$(RELEASE_GID) --clear-groups \
			make GOCACHE=/tmp/cache cli-local-release VERSION=${VERSION}"

.PHONY: cli-local-release
cli-local-release: cli-clean
	set -o errexit; \
	for OS in darwin linux windows; do \
		EXT=; \
		ARCHS=; \
		case $$OS in \
			darwin) \
				ARCHS='arm64 amd64'; \
				;; \
			linux) \
				ARCHS='arm64 amd64'; \
				;; \
			windows) \
				ARCHS='arm64 amd64'; \
				EXT='.exe'; \
				;; \
		esac; \
		for ARCH in $$ARCHS; do \
			echo Building release binary for $$OS/$$ARCH...; \
			test -d release/$$OS/$$ARCH|| mkdir -p release/$$OS/$$ARCH; \
			env GOOS=$$OS GOARCH=$$ARCH $(CLI_GO_BUILD) -ldflags="$(GO_BUILD_LDFLAGS)" -o release/$$OS/$$ARCH/$(TARGET)$$EXT ./cmd/tetra; \
			tar -czf release/$(TARGET)-$$OS-$$ARCH.tar.gz -C release/$$OS/$$ARCH $(TARGET)$$EXT; \
			(cd release && sha256sum $(TARGET)-$$OS-$$ARCH.tar.gz > $(TARGET)-$$OS-$$ARCH.tar.gz.sha256sum); \
		done; \
		rm -r release/$$OS; \
	done; \

.PHONY: cli-clean
cli-clean:
	rm -rf ./release
