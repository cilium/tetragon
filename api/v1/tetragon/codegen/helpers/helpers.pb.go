// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Tetragon

// Code generated by protoc-gen-go-tetragon. DO NOT EDIT

package helpers

import (
	fmt "fmt"
	tetragon "github.com/cilium/tetragon/api/v1/tetragon"
)

type event interface {
	// Represents a generic Tetragon event
}
type response interface {
	// Represents a generic Tetragon gRPC response
}

// EventTypeString returns an event's type as a string
func EventTypeString(event event) (string, error) {
	if event == nil {
		return "", fmt.Errorf("Event is nil")
	}
	switch event.(type) {
	case *tetragon.GetEventsResponse_ProcessExec:
		return tetragon.EventType_PROCESS_EXEC.String(), nil
	case *tetragon.GetEventsResponse_ProcessExit:
		return tetragon.EventType_PROCESS_EXIT.String(), nil
	case *tetragon.GetEventsResponse_ProcessKprobe:
		return tetragon.EventType_PROCESS_KPROBE.String(), nil
	case *tetragon.GetEventsResponse_ProcessTracepoint:
		return tetragon.EventType_PROCESS_TRACEPOINT.String(), nil
	case *tetragon.GetEventsResponse_ProcessDns:
		return tetragon.EventType_PROCESS_DNS.String(), nil
	case *tetragon.GetEventsResponse_Test:
		return tetragon.EventType_TEST.String(), nil

	}
	return "", fmt.Errorf("Unhandled event type %T", event)
}

// EventGetProcess gets the process field for an event if it exists
func EventGetProcess(event event) *tetragon.Process {
	if event == nil {
		return nil
	}
	switch ev := event.(type) {
	case *tetragon.GetEventsResponse_ProcessExec:
		return ev.ProcessExec.Process
	case *tetragon.GetEventsResponse_ProcessExit:
		return ev.ProcessExit.Process
	case *tetragon.GetEventsResponse_ProcessKprobe:
		return ev.ProcessKprobe.Process
	case *tetragon.GetEventsResponse_ProcessTracepoint:
		return ev.ProcessTracepoint.Process
	case *tetragon.GetEventsResponse_ProcessDns:
		return ev.ProcessDns.Process

	}
	return nil
}

// ResponseGetProcess gets the process field for a response if it exists
func ResponseGetProcess(response response) *tetragon.Process {
	if response == nil {
		return nil
	}
	switch res := response.(type) {
	case *tetragon.GetEventsResponse:
		return EventGetProcess(res.Event)
	}
	return nil
}

// EventGetParent gets the parent field for an event if it exists
func EventGetParent(event event) *tetragon.Process {
	if event == nil {
		return nil
	}
	switch ev := event.(type) {
	case *tetragon.GetEventsResponse_ProcessExec:
		return ev.ProcessExec.Parent
	case *tetragon.GetEventsResponse_ProcessExit:
		return ev.ProcessExit.Parent
	case *tetragon.GetEventsResponse_ProcessKprobe:
		return ev.ProcessKprobe.Parent
	case *tetragon.GetEventsResponse_ProcessTracepoint:
		return ev.ProcessTracepoint.Parent

	}
	return nil
}

// ResponseGetParent gets the parent field for a response if it exists
func ResponseGetParent(response response) *tetragon.Process {
	if response == nil {
		return nil
	}
	switch res := response.(type) {
	case *tetragon.GetEventsResponse:
		return EventGetParent(res.Event)
	}
	return nil
}
