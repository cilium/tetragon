// Copyright 2020 Authors of Hubble
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: tetragon/tetragon.proto

package tetragon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KprobeAction int32

const (
	KprobeAction_KPROBE_ACTION_UNKNOWN    KprobeAction = 0
	KprobeAction_KPROBE_ACTION_POST       KprobeAction = 1
	KprobeAction_KPROBE_ACTION_FOLLOWFD   KprobeAction = 2
	KprobeAction_KPROBE_ACTION_SIGKILL    KprobeAction = 3
	KprobeAction_KPROBE_ACTION_UNFOLLOWFD KprobeAction = 4
	KprobeAction_KPROBE_ACTION_OVERRIDE   KprobeAction = 5
	KprobeAction_KPROBE_ACTION_COPYFD     KprobeAction = 6
)

// Enum value maps for KprobeAction.
var (
	KprobeAction_name = map[int32]string{
		0: "KPROBE_ACTION_UNKNOWN",
		1: "KPROBE_ACTION_POST",
		2: "KPROBE_ACTION_FOLLOWFD",
		3: "KPROBE_ACTION_SIGKILL",
		4: "KPROBE_ACTION_UNFOLLOWFD",
		5: "KPROBE_ACTION_OVERRIDE",
		6: "KPROBE_ACTION_COPYFD",
	}
	KprobeAction_value = map[string]int32{
		"KPROBE_ACTION_UNKNOWN":    0,
		"KPROBE_ACTION_POST":       1,
		"KPROBE_ACTION_FOLLOWFD":   2,
		"KPROBE_ACTION_SIGKILL":    3,
		"KPROBE_ACTION_UNFOLLOWFD": 4,
		"KPROBE_ACTION_OVERRIDE":   5,
		"KPROBE_ACTION_COPYFD":     6,
	}
)

func (x KprobeAction) Enum() *KprobeAction {
	p := new(KprobeAction)
	*p = x
	return p
}

func (x KprobeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KprobeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[0].Descriptor()
}

func (KprobeAction) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[0]
}

func (x KprobeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KprobeAction.Descriptor instead.
func (KprobeAction) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{0}
}

type HealthStatusType int32

const (
	HealthStatusType_HEALTH_STATUS_TYPE_UNDEF  HealthStatusType = 0
	HealthStatusType_HEALTH_STATUS_TYPE_STATUS HealthStatusType = 1
)

// Enum value maps for HealthStatusType.
var (
	HealthStatusType_name = map[int32]string{
		0: "HEALTH_STATUS_TYPE_UNDEF",
		1: "HEALTH_STATUS_TYPE_STATUS",
	}
	HealthStatusType_value = map[string]int32{
		"HEALTH_STATUS_TYPE_UNDEF":  0,
		"HEALTH_STATUS_TYPE_STATUS": 1,
	}
)

func (x HealthStatusType) Enum() *HealthStatusType {
	p := new(HealthStatusType)
	*p = x
	return p
}

func (x HealthStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[1].Descriptor()
}

func (HealthStatusType) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[1]
}

func (x HealthStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatusType.Descriptor instead.
func (HealthStatusType) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{1}
}

type HealthStatusResult int32

const (
	HealthStatusResult_HEALTH_STATUS_UNDEF   HealthStatusResult = 0
	HealthStatusResult_HEALTH_STATUS_RUNNING HealthStatusResult = 1
	HealthStatusResult_HEALTH_STATUS_STOPPED HealthStatusResult = 2
	HealthStatusResult_HEALTH_STATUS_ERROR   HealthStatusResult = 3
)

// Enum value maps for HealthStatusResult.
var (
	HealthStatusResult_name = map[int32]string{
		0: "HEALTH_STATUS_UNDEF",
		1: "HEALTH_STATUS_RUNNING",
		2: "HEALTH_STATUS_STOPPED",
		3: "HEALTH_STATUS_ERROR",
	}
	HealthStatusResult_value = map[string]int32{
		"HEALTH_STATUS_UNDEF":   0,
		"HEALTH_STATUS_RUNNING": 1,
		"HEALTH_STATUS_STOPPED": 2,
		"HEALTH_STATUS_ERROR":   3,
	}
)

func (x HealthStatusResult) Enum() *HealthStatusResult {
	p := new(HealthStatusResult)
	*p = x
	return p
}

func (x HealthStatusResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatusResult) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[2].Descriptor()
}

func (HealthStatusResult) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[2]
}

func (x HealthStatusResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatusResult.Descriptor instead.
func (HealthStatusResult) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{2}
}

// EventType constants are based on the ones from pkg/api/client
type EventType int32

const (
	EventType_UNDEF              EventType = 0
	EventType_PROCESS_EXEC       EventType = 5
	EventType_PROCESS_EXIT       EventType = 7
	EventType_PROCESS_KPROBE     EventType = 13
	EventType_PROCESS_TRACEPOINT EventType = 14
	EventType_PROCESS_DNS        EventType = 18
	EventType_TEST               EventType = 254
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:   "UNDEF",
		5:   "PROCESS_EXEC",
		7:   "PROCESS_EXIT",
		13:  "PROCESS_KPROBE",
		14:  "PROCESS_TRACEPOINT",
		18:  "PROCESS_DNS",
		254: "TEST",
	}
	EventType_value = map[string]int32{
		"UNDEF":              0,
		"PROCESS_EXEC":       5,
		"PROCESS_EXIT":       7,
		"PROCESS_KPROBE":     13,
		"PROCESS_TRACEPOINT": 14,
		"PROCESS_DNS":        18,
		"TEST":               254,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[3].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[3]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{3}
}

type CapabilitiesType int32

const (
	// In a system with the [_POSIX_CHOWN_RESTRICTED] option defined, this
	//overrides the restriction of changing file ownership and group
	//ownership.
	CapabilitiesType_CAP_CHOWN    CapabilitiesType = 0
	CapabilitiesType_DAC_OVERRIDE CapabilitiesType = 1
	// Overrides all DAC restrictions regarding read and search on files
	//and directories, including ACL restrictions if [_POSIX_ACL] is
	//defined. Excluding DAC access covered by "$1"_LINUX_IMMUTABLE.
	CapabilitiesType_CAP_DAC_READ_SEARCH  CapabilitiesType = 2
	CapabilitiesType_CAP_FOWNER           CapabilitiesType = 3
	CapabilitiesType_CAP_FSETID           CapabilitiesType = 4
	CapabilitiesType_CAP_KILL             CapabilitiesType = 5
	CapabilitiesType_CAP_SETGID           CapabilitiesType = 6
	CapabilitiesType_CAP_SETUID           CapabilitiesType = 7
	CapabilitiesType_CAP_SETPCAP          CapabilitiesType = 8
	CapabilitiesType_CAP_LINUX_IMMUTABLE  CapabilitiesType = 9
	CapabilitiesType_CAP_NET_BIND_SERVICE CapabilitiesType = 10
	CapabilitiesType_CAP_NET_BROADCAST    CapabilitiesType = 11
	CapabilitiesType_CAP_NET_ADMIN        CapabilitiesType = 12
	CapabilitiesType_CAP_NET_RAW          CapabilitiesType = 13
	CapabilitiesType_CAP_IPC_LOCK         CapabilitiesType = 14
	CapabilitiesType_CAP_IPC_OWNER        CapabilitiesType = 15
	// Insert and remove kernel modules - modify kernel without limit
	CapabilitiesType_CAP_SYS_MODULE     CapabilitiesType = 16
	CapabilitiesType_CAP_SYS_RAWIO      CapabilitiesType = 17
	CapabilitiesType_CAP_SYS_CHROOT     CapabilitiesType = 18
	CapabilitiesType_CAP_SYS_PTRACE     CapabilitiesType = 19 // Allow configuration of process accounting
	CapabilitiesType_CAP_SYS_PACCT      CapabilitiesType = 20
	CapabilitiesType_CAP_SYS_ADMIN      CapabilitiesType = 21
	CapabilitiesType_CAP_SYS_BOOT       CapabilitiesType = 22
	CapabilitiesType_CAP_SYS_NICE       CapabilitiesType = 23
	CapabilitiesType_CAP_SYS_RESOURCE   CapabilitiesType = 24
	CapabilitiesType_CAP_SYS_TIME       CapabilitiesType = 25
	CapabilitiesType_CAP_SYS_TTY_CONFIG CapabilitiesType = 26
	CapabilitiesType_CAP_MKNOD          CapabilitiesType = 27
	CapabilitiesType_CAP_LEASE          CapabilitiesType = 28
	CapabilitiesType_CAP_AUDIT_WRITE    CapabilitiesType = 29
	CapabilitiesType_CAP_AUDIT_CONTROL  CapabilitiesType = 30
	CapabilitiesType_CAP_SETFCAP        CapabilitiesType = 31
	CapabilitiesType_CAP_MAC_OVERRIDE   CapabilitiesType = 32
	CapabilitiesType_CAP_MAC_ADMIN      CapabilitiesType = 33
	CapabilitiesType_CAP_SYSLOG         CapabilitiesType = 34
	CapabilitiesType_CAP_WAKE_ALARM     CapabilitiesType = 35
	CapabilitiesType_CAP_BLOCK_SUSPEND  CapabilitiesType = 36
	CapabilitiesType_CAP_AUDIT_READ     CapabilitiesType = 37
	CapabilitiesType_CAP_PERFMON        CapabilitiesType = 38
	//
	// CAP_BPF allows the following BPF operations:
	// - Creating all types of BPF maps
	// - Advanced verifier features
	//   - Indirect variable access
	//   - Bounded loops
	//   - BPF to BPF function calls
	//   - Scalar precision tracking
	//   - Larger complexity limits
	//   - Dead code elimination
	//   - And potentially other features
	// - Loading BPF Type Format (BTF) data
	// - Retrieve xlated and JITed code of BPF programs
	// - Use bpf_spin_lock() helper
	//
	// CAP_PERFMON relaxes the verifier checks further:
	// - BPF progs can use of pointer-to-integer conversions
	// - speculation attack hardening measures are bypassed
	// - bpf_probe_read to read arbitrary kernel memory is allowed
	// - bpf_trace_printk to print kernel memory is allowed
	//
	// CAP_SYS_ADMIN is required to use bpf_probe_write_user.
	//
	// CAP_SYS_ADMIN is required to iterate system wide loaded
	// programs, maps, links, BTFs and convert their IDs to file descriptors.
	//
	// CAP_PERFMON and CAP_BPF are required to load tracing programs.
	// CAP_NET_ADMIN and CAP_BPF are required to load networking programs.
	CapabilitiesType_CAP_BPF                CapabilitiesType = 39
	CapabilitiesType_CAP_CHECKPOINT_RESTORE CapabilitiesType = 40
)

// Enum value maps for CapabilitiesType.
var (
	CapabilitiesType_name = map[int32]string{
		0:  "CAP_CHOWN",
		1:  "DAC_OVERRIDE",
		2:  "CAP_DAC_READ_SEARCH",
		3:  "CAP_FOWNER",
		4:  "CAP_FSETID",
		5:  "CAP_KILL",
		6:  "CAP_SETGID",
		7:  "CAP_SETUID",
		8:  "CAP_SETPCAP",
		9:  "CAP_LINUX_IMMUTABLE",
		10: "CAP_NET_BIND_SERVICE",
		11: "CAP_NET_BROADCAST",
		12: "CAP_NET_ADMIN",
		13: "CAP_NET_RAW",
		14: "CAP_IPC_LOCK",
		15: "CAP_IPC_OWNER",
		16: "CAP_SYS_MODULE",
		17: "CAP_SYS_RAWIO",
		18: "CAP_SYS_CHROOT",
		19: "CAP_SYS_PTRACE",
		20: "CAP_SYS_PACCT",
		21: "CAP_SYS_ADMIN",
		22: "CAP_SYS_BOOT",
		23: "CAP_SYS_NICE",
		24: "CAP_SYS_RESOURCE",
		25: "CAP_SYS_TIME",
		26: "CAP_SYS_TTY_CONFIG",
		27: "CAP_MKNOD",
		28: "CAP_LEASE",
		29: "CAP_AUDIT_WRITE",
		30: "CAP_AUDIT_CONTROL",
		31: "CAP_SETFCAP",
		32: "CAP_MAC_OVERRIDE",
		33: "CAP_MAC_ADMIN",
		34: "CAP_SYSLOG",
		35: "CAP_WAKE_ALARM",
		36: "CAP_BLOCK_SUSPEND",
		37: "CAP_AUDIT_READ",
		38: "CAP_PERFMON",
		39: "CAP_BPF",
		40: "CAP_CHECKPOINT_RESTORE",
	}
	CapabilitiesType_value = map[string]int32{
		"CAP_CHOWN":              0,
		"DAC_OVERRIDE":           1,
		"CAP_DAC_READ_SEARCH":    2,
		"CAP_FOWNER":             3,
		"CAP_FSETID":             4,
		"CAP_KILL":               5,
		"CAP_SETGID":             6,
		"CAP_SETUID":             7,
		"CAP_SETPCAP":            8,
		"CAP_LINUX_IMMUTABLE":    9,
		"CAP_NET_BIND_SERVICE":   10,
		"CAP_NET_BROADCAST":      11,
		"CAP_NET_ADMIN":          12,
		"CAP_NET_RAW":            13,
		"CAP_IPC_LOCK":           14,
		"CAP_IPC_OWNER":          15,
		"CAP_SYS_MODULE":         16,
		"CAP_SYS_RAWIO":          17,
		"CAP_SYS_CHROOT":         18,
		"CAP_SYS_PTRACE":         19,
		"CAP_SYS_PACCT":          20,
		"CAP_SYS_ADMIN":          21,
		"CAP_SYS_BOOT":           22,
		"CAP_SYS_NICE":           23,
		"CAP_SYS_RESOURCE":       24,
		"CAP_SYS_TIME":           25,
		"CAP_SYS_TTY_CONFIG":     26,
		"CAP_MKNOD":              27,
		"CAP_LEASE":              28,
		"CAP_AUDIT_WRITE":        29,
		"CAP_AUDIT_CONTROL":      30,
		"CAP_SETFCAP":            31,
		"CAP_MAC_OVERRIDE":       32,
		"CAP_MAC_ADMIN":          33,
		"CAP_SYSLOG":             34,
		"CAP_WAKE_ALARM":         35,
		"CAP_BLOCK_SUSPEND":      36,
		"CAP_AUDIT_READ":         37,
		"CAP_PERFMON":            38,
		"CAP_BPF":                39,
		"CAP_CHECKPOINT_RESTORE": 40,
	}
)

func (x CapabilitiesType) Enum() *CapabilitiesType {
	p := new(CapabilitiesType)
	*p = x
	return p
}

func (x CapabilitiesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilitiesType) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[4].Descriptor()
}

func (CapabilitiesType) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[4]
}

func (x CapabilitiesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilitiesType.Descriptor instead.
func (CapabilitiesType) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{4}
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Start time of the container.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// PID in the container namespace.
	Pid *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	// If this is set true, it means that the process might have been originated from
	// a Kubernetes exec probe. For this field to be true, the following must be true:
	//
	// 1. The binary field matches the first element of the exec command list for either
	//    liveness or readiness probe excluding the basename. For example, "/bin/ls"
	//    and "ls" are considered a match.
	// 2. The arguments field exactly matches the rest of the exec command list.
	MaybeExecProbe bool `protobuf:"varint,13,opt,name=maybe_exec_probe,json=maybeExecProbe,proto3" json:"maybe_exec_probe,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{1}
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Container) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Container) GetMaybeExecProbe() bool {
	if x != nil {
		return x.MaybeExecProbe
	}
	return false
}

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    []string   `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Container *Container `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{2}
}

func (x *Pod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pod) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Pod) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permitted   []CapabilitiesType `protobuf:"varint,1,rep,packed,name=permitted,proto3,enum=tetragon.CapabilitiesType" json:"permitted,omitempty"`
	Effective   []CapabilitiesType `protobuf:"varint,2,rep,packed,name=effective,proto3,enum=tetragon.CapabilitiesType" json:"effective,omitempty"`
	Inheritable []CapabilitiesType `protobuf:"varint,3,rep,packed,name=inheritable,proto3,enum=tetragon.CapabilitiesType" json:"inheritable,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{3}
}

func (x *Capabilities) GetPermitted() []CapabilitiesType {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *Capabilities) GetEffective() []CapabilitiesType {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Capabilities) GetInheritable() []CapabilitiesType {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inum   uint32 `protobuf:"varint,1,opt,name=inum,proto3" json:"inum,omitempty"`
	IsHost bool   `protobuf:"varint,2,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{4}
}

func (x *Namespace) GetInum() uint32 {
	if x != nil {
		return x.Inum
	}
	return 0
}

func (x *Namespace) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

type Namespaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uts             *Namespace `protobuf:"bytes,1,opt,name=uts,proto3" json:"uts,omitempty"`
	Ipc             *Namespace `protobuf:"bytes,2,opt,name=ipc,proto3" json:"ipc,omitempty"`
	Mnt             *Namespace `protobuf:"bytes,3,opt,name=mnt,proto3" json:"mnt,omitempty"`
	Pid             *Namespace `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`
	PidForChildren  *Namespace `protobuf:"bytes,5,opt,name=pid_for_children,json=pidForChildren,proto3" json:"pid_for_children,omitempty"`
	Net             *Namespace `protobuf:"bytes,6,opt,name=net,proto3" json:"net,omitempty"`
	Time            *Namespace `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	TimeForChildren *Namespace `protobuf:"bytes,8,opt,name=time_for_children,json=timeForChildren,proto3" json:"time_for_children,omitempty"`
	Cgroup          *Namespace `protobuf:"bytes,9,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
	User            *Namespace `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Namespaces) Reset() {
	*x = Namespaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespaces) ProtoMessage() {}

func (x *Namespaces) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespaces.ProtoReflect.Descriptor instead.
func (*Namespaces) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{5}
}

func (x *Namespaces) GetUts() *Namespace {
	if x != nil {
		return x.Uts
	}
	return nil
}

func (x *Namespaces) GetIpc() *Namespace {
	if x != nil {
		return x.Ipc
	}
	return nil
}

func (x *Namespaces) GetMnt() *Namespace {
	if x != nil {
		return x.Mnt
	}
	return nil
}

func (x *Namespaces) GetPid() *Namespace {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Namespaces) GetPidForChildren() *Namespace {
	if x != nil {
		return x.PidForChildren
	}
	return nil
}

func (x *Namespaces) GetNet() *Namespace {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Namespaces) GetTime() *Namespace {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Namespaces) GetTimeForChildren() *Namespace {
	if x != nil {
		return x.TimeForChildren
	}
	return nil
}

func (x *Namespaces) GetCgroup() *Namespace {
	if x != nil {
		return x.Cgroup
	}
	return nil
}

func (x *Namespaces) GetUser() *Namespace {
	if x != nil {
		return x.User
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exec ID uniquely identifies the process over time across all the nodes in the cluster.
	ExecId       string                  `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Pid          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid          *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Cwd          string                  `protobuf:"bytes,4,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Binary       string                  `protobuf:"bytes,5,opt,name=binary,proto3" json:"binary,omitempty"`
	Arguments    string                  `protobuf:"bytes,6,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Flags        string                  `protobuf:"bytes,7,opt,name=flags,proto3" json:"flags,omitempty"`
	StartTime    *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Auid         *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=auid,proto3" json:"auid,omitempty"`
	Pod          *Pod                    `protobuf:"bytes,10,opt,name=pod,proto3" json:"pod,omitempty"`
	Docker       string                  `protobuf:"bytes,11,opt,name=docker,proto3" json:"docker,omitempty"`
	ParentExecId string                  `protobuf:"bytes,12,opt,name=parent_exec_id,json=parentExecId,proto3" json:"parent_exec_id,omitempty"`
	Refcnt       uint32                  `protobuf:"varint,13,opt,name=refcnt,proto3" json:"refcnt,omitempty"`
	Cap          *Capabilities           `protobuf:"bytes,14,opt,name=cap,proto3" json:"cap,omitempty"`
	Ns           *Namespaces             `protobuf:"bytes,15,opt,name=ns,proto3" json:"ns,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{6}
}

func (x *Process) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *Process) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Process) GetUid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Process) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Process) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *Process) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *Process) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

func (x *Process) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Process) GetAuid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Auid
	}
	return nil
}

func (x *Process) GetPod() *Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *Process) GetDocker() string {
	if x != nil {
		return x.Docker
	}
	return ""
}

func (x *Process) GetParentExecId() string {
	if x != nil {
		return x.ParentExecId
	}
	return ""
}

func (x *Process) GetRefcnt() uint32 {
	if x != nil {
		return x.Refcnt
	}
	return 0
}

func (x *Process) GetCap() *Capabilities {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *Process) GetNs() *Namespaces {
	if x != nil {
		return x.Ns
	}
	return nil
}

type ProcessExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Ancestors of the process beyond the immediate parent.
	Ancestors []*Process `protobuf:"bytes,3,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
}

func (x *ProcessExec) Reset() {
	*x = ProcessExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessExec) ProtoMessage() {}

func (x *ProcessExec) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessExec.ProtoReflect.Descriptor instead.
func (*ProcessExec) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessExec) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessExec) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessExec) GetAncestors() []*Process {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

type ProcessExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Signal  string   `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	Status  uint32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ProcessExit) Reset() {
	*x = ProcessExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessExit) ProtoMessage() {}

func (x *ProcessExit) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessExit.ProtoReflect.Descriptor instead.
func (*ProcessExit) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessExit) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessExit) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessExit) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

func (x *ProcessExit) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type KprobeSock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Mark     uint32 `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Saddr    string `protobuf:"bytes,6,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr    string `protobuf:"bytes,7,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport    uint32 `protobuf:"varint,8,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport    uint32 `protobuf:"varint,9,opt,name=dport,proto3" json:"dport,omitempty"`
}

func (x *KprobeSock) Reset() {
	*x = KprobeSock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeSock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeSock) ProtoMessage() {}

func (x *KprobeSock) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeSock.ProtoReflect.Descriptor instead.
func (*KprobeSock) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{9}
}

func (x *KprobeSock) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *KprobeSock) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KprobeSock) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *KprobeSock) GetMark() uint32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *KprobeSock) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *KprobeSock) GetSaddr() string {
	if x != nil {
		return x.Saddr
	}
	return ""
}

func (x *KprobeSock) GetDaddr() string {
	if x != nil {
		return x.Daddr
	}
	return ""
}

func (x *KprobeSock) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *KprobeSock) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

type KprobeSkb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        uint32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Len         uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Priority    uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Mark        uint32 `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
	Saddr       string `protobuf:"bytes,5,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr       string `protobuf:"bytes,6,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport       uint32 `protobuf:"varint,7,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport       uint32 `protobuf:"varint,8,opt,name=dport,proto3" json:"dport,omitempty"`
	Proto       uint32 `protobuf:"varint,9,opt,name=proto,proto3" json:"proto,omitempty"`
	SecPathLen  uint32 `protobuf:"varint,10,opt,name=sec_path_len,json=secPathLen,proto3" json:"sec_path_len,omitempty"`
	SecPathOlen uint32 `protobuf:"varint,11,opt,name=sec_path_olen,json=secPathOlen,proto3" json:"sec_path_olen,omitempty"`
}

func (x *KprobeSkb) Reset() {
	*x = KprobeSkb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeSkb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeSkb) ProtoMessage() {}

func (x *KprobeSkb) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeSkb.ProtoReflect.Descriptor instead.
func (*KprobeSkb) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{10}
}

func (x *KprobeSkb) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *KprobeSkb) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *KprobeSkb) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *KprobeSkb) GetMark() uint32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *KprobeSkb) GetSaddr() string {
	if x != nil {
		return x.Saddr
	}
	return ""
}

func (x *KprobeSkb) GetDaddr() string {
	if x != nil {
		return x.Daddr
	}
	return ""
}

func (x *KprobeSkb) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *KprobeSkb) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

func (x *KprobeSkb) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *KprobeSkb) GetSecPathLen() uint32 {
	if x != nil {
		return x.SecPathLen
	}
	return 0
}

func (x *KprobeSkb) GetSecPathOlen() uint32 {
	if x != nil {
		return x.SecPathOlen
	}
	return 0
}

type KprobePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mount string `protobuf:"bytes,1,opt,name=mount,proto3" json:"mount,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Flags string `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *KprobePath) Reset() {
	*x = KprobePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobePath) ProtoMessage() {}

func (x *KprobePath) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobePath.ProtoReflect.Descriptor instead.
func (*KprobePath) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{11}
}

func (x *KprobePath) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *KprobePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KprobePath) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

type KprobeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mount string `protobuf:"bytes,1,opt,name=mount,proto3" json:"mount,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Flags string `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *KprobeFile) Reset() {
	*x = KprobeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeFile) ProtoMessage() {}

func (x *KprobeFile) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeFile.ProtoReflect.Descriptor instead.
func (*KprobeFile) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{12}
}

func (x *KprobeFile) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *KprobeFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KprobeFile) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

type KprobeTruncatedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesArg []byte `protobuf:"bytes,1,opt,name=bytes_arg,json=bytesArg,proto3" json:"bytes_arg,omitempty"`
	OrigSize uint64 `protobuf:"varint,2,opt,name=orig_size,json=origSize,proto3" json:"orig_size,omitempty"`
}

func (x *KprobeTruncatedBytes) Reset() {
	*x = KprobeTruncatedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeTruncatedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeTruncatedBytes) ProtoMessage() {}

func (x *KprobeTruncatedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeTruncatedBytes.ProtoReflect.Descriptor instead.
func (*KprobeTruncatedBytes) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{13}
}

func (x *KprobeTruncatedBytes) GetBytesArg() []byte {
	if x != nil {
		return x.BytesArg
	}
	return nil
}

func (x *KprobeTruncatedBytes) GetOrigSize() uint64 {
	if x != nil {
		return x.OrigSize
	}
	return 0
}

type KprobeCred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permitted   []CapabilitiesType `protobuf:"varint,1,rep,packed,name=permitted,proto3,enum=tetragon.CapabilitiesType" json:"permitted,omitempty"`
	Effective   []CapabilitiesType `protobuf:"varint,2,rep,packed,name=effective,proto3,enum=tetragon.CapabilitiesType" json:"effective,omitempty"`
	Inheritable []CapabilitiesType `protobuf:"varint,3,rep,packed,name=inheritable,proto3,enum=tetragon.CapabilitiesType" json:"inheritable,omitempty"`
}

func (x *KprobeCred) Reset() {
	*x = KprobeCred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeCred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeCred) ProtoMessage() {}

func (x *KprobeCred) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeCred.ProtoReflect.Descriptor instead.
func (*KprobeCred) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{14}
}

func (x *KprobeCred) GetPermitted() []CapabilitiesType {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *KprobeCred) GetEffective() []CapabilitiesType {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *KprobeCred) GetInheritable() []CapabilitiesType {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

type KprobeArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Arg:
	//	*KprobeArgument_StringArg
	//	*KprobeArgument_IntArg
	//	*KprobeArgument_SkbArg
	//	*KprobeArgument_SizeArg
	//	*KprobeArgument_BytesArg
	//	*KprobeArgument_PathArg
	//	*KprobeArgument_FileArg
	//	*KprobeArgument_TruncatedBytesArg
	//	*KprobeArgument_SockArg
	//	*KprobeArgument_CredArg
	//	*KprobeArgument_LongArg
	Arg isKprobeArgument_Arg `protobuf_oneof:"arg"`
}

func (x *KprobeArgument) Reset() {
	*x = KprobeArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeArgument) ProtoMessage() {}

func (x *KprobeArgument) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeArgument.ProtoReflect.Descriptor instead.
func (*KprobeArgument) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{15}
}

func (m *KprobeArgument) GetArg() isKprobeArgument_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *KprobeArgument) GetStringArg() string {
	if x, ok := x.GetArg().(*KprobeArgument_StringArg); ok {
		return x.StringArg
	}
	return ""
}

func (x *KprobeArgument) GetIntArg() int32 {
	if x, ok := x.GetArg().(*KprobeArgument_IntArg); ok {
		return x.IntArg
	}
	return 0
}

func (x *KprobeArgument) GetSkbArg() *KprobeSkb {
	if x, ok := x.GetArg().(*KprobeArgument_SkbArg); ok {
		return x.SkbArg
	}
	return nil
}

func (x *KprobeArgument) GetSizeArg() uint64 {
	if x, ok := x.GetArg().(*KprobeArgument_SizeArg); ok {
		return x.SizeArg
	}
	return 0
}

func (x *KprobeArgument) GetBytesArg() []byte {
	if x, ok := x.GetArg().(*KprobeArgument_BytesArg); ok {
		return x.BytesArg
	}
	return nil
}

func (x *KprobeArgument) GetPathArg() *KprobePath {
	if x, ok := x.GetArg().(*KprobeArgument_PathArg); ok {
		return x.PathArg
	}
	return nil
}

func (x *KprobeArgument) GetFileArg() *KprobeFile {
	if x, ok := x.GetArg().(*KprobeArgument_FileArg); ok {
		return x.FileArg
	}
	return nil
}

func (x *KprobeArgument) GetTruncatedBytesArg() *KprobeTruncatedBytes {
	if x, ok := x.GetArg().(*KprobeArgument_TruncatedBytesArg); ok {
		return x.TruncatedBytesArg
	}
	return nil
}

func (x *KprobeArgument) GetSockArg() *KprobeSock {
	if x, ok := x.GetArg().(*KprobeArgument_SockArg); ok {
		return x.SockArg
	}
	return nil
}

func (x *KprobeArgument) GetCredArg() *KprobeCred {
	if x, ok := x.GetArg().(*KprobeArgument_CredArg); ok {
		return x.CredArg
	}
	return nil
}

func (x *KprobeArgument) GetLongArg() int64 {
	if x, ok := x.GetArg().(*KprobeArgument_LongArg); ok {
		return x.LongArg
	}
	return 0
}

type isKprobeArgument_Arg interface {
	isKprobeArgument_Arg()
}

type KprobeArgument_StringArg struct {
	StringArg string `protobuf:"bytes,1,opt,name=string_arg,json=stringArg,proto3,oneof"`
}

type KprobeArgument_IntArg struct {
	IntArg int32 `protobuf:"varint,2,opt,name=int_arg,json=intArg,proto3,oneof"`
}

type KprobeArgument_SkbArg struct {
	SkbArg *KprobeSkb `protobuf:"bytes,3,opt,name=skb_arg,json=skbArg,proto3,oneof"`
}

type KprobeArgument_SizeArg struct {
	SizeArg uint64 `protobuf:"varint,4,opt,name=size_arg,json=sizeArg,proto3,oneof"`
}

type KprobeArgument_BytesArg struct {
	BytesArg []byte `protobuf:"bytes,5,opt,name=bytes_arg,json=bytesArg,proto3,oneof"`
}

type KprobeArgument_PathArg struct {
	PathArg *KprobePath `protobuf:"bytes,6,opt,name=path_arg,json=pathArg,proto3,oneof"`
}

type KprobeArgument_FileArg struct {
	FileArg *KprobeFile `protobuf:"bytes,7,opt,name=file_arg,json=fileArg,proto3,oneof"`
}

type KprobeArgument_TruncatedBytesArg struct {
	TruncatedBytesArg *KprobeTruncatedBytes `protobuf:"bytes,8,opt,name=truncated_bytes_arg,json=truncatedBytesArg,proto3,oneof"`
}

type KprobeArgument_SockArg struct {
	SockArg *KprobeSock `protobuf:"bytes,9,opt,name=sock_arg,json=sockArg,proto3,oneof"`
}

type KprobeArgument_CredArg struct {
	CredArg *KprobeCred `protobuf:"bytes,10,opt,name=cred_arg,json=credArg,proto3,oneof"`
}

type KprobeArgument_LongArg struct {
	LongArg int64 `protobuf:"varint,11,opt,name=long_arg,json=longArg,proto3,oneof"`
}

func (*KprobeArgument_StringArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_IntArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SkbArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SizeArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_BytesArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_PathArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_FileArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_TruncatedBytesArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SockArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_CredArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_LongArg) isKprobeArgument_Arg() {}

type ProcessKprobe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process      *Process          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent       *Process          `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	FunctionName string            `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Args         []*KprobeArgument `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Return       *KprobeArgument   `protobuf:"bytes,5,opt,name=return,proto3" json:"return,omitempty"`
	Action       KprobeAction      `protobuf:"varint,6,opt,name=action,proto3,enum=tetragon.KprobeAction" json:"action,omitempty"`
}

func (x *ProcessKprobe) Reset() {
	*x = ProcessKprobe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessKprobe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessKprobe) ProtoMessage() {}

func (x *ProcessKprobe) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessKprobe.ProtoReflect.Descriptor instead.
func (*ProcessKprobe) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{16}
}

func (x *ProcessKprobe) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessKprobe) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessKprobe) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *ProcessKprobe) GetArgs() []*KprobeArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProcessKprobe) GetReturn() *KprobeArgument {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ProcessKprobe) GetAction() KprobeAction {
	if x != nil {
		return x.Action
	}
	return KprobeAction_KPROBE_ACTION_UNKNOWN
}

type ProcessTracepoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Subsys  string   `protobuf:"bytes,4,opt,name=subsys,proto3" json:"subsys,omitempty"`
	Event   string   `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	// TODO: once we implement all we want, rename KprobeArgument to GenericArgument
	Args []*KprobeArgument `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ProcessTracepoint) Reset() {
	*x = ProcessTracepoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTracepoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTracepoint) ProtoMessage() {}

func (x *ProcessTracepoint) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTracepoint.ProtoReflect.Descriptor instead.
func (*ProcessTracepoint) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{17}
}

func (x *ProcessTracepoint) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessTracepoint) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessTracepoint) GetSubsys() string {
	if x != nil {
		return x.Subsys
	}
	return ""
}

func (x *ProcessTracepoint) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ProcessTracepoint) GetArgs() []*KprobeArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg0 uint64 `protobuf:"varint,1,opt,name=arg0,proto3" json:"arg0,omitempty"`
	Arg1 uint64 `protobuf:"varint,2,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 uint64 `protobuf:"varint,3,opt,name=arg2,proto3" json:"arg2,omitempty"`
	Arg3 uint64 `protobuf:"varint,4,opt,name=arg3,proto3" json:"arg3,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{18}
}

func (x *Test) GetArg0() uint64 {
	if x != nil {
		return x.Arg0
	}
	return 0
}

func (x *Test) GetArg1() uint64 {
	if x != nil {
		return x.Arg1
	}
	return 0
}

func (x *Test) GetArg2() uint64 {
	if x != nil {
		return x.Arg2
	}
	return 0
}

func (x *Test) GetArg3() uint64 {
	if x != nil {
		return x.Arg3
	}
	return 0
}

type DnsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionTypes []uint32 `protobuf:"varint,1,rep,packed,name=question_types,json=questionTypes,proto3" json:"question_types,omitempty"`
	AnswerTypes   []uint32 `protobuf:"varint,2,rep,packed,name=answer_types,json=answerTypes,proto3" json:"answer_types,omitempty"`
	Rcode         int32    `protobuf:"varint,3,opt,name=rcode,proto3" json:"rcode,omitempty"`
	Names         []string `protobuf:"bytes,4,rep,name=names,proto3" json:"names,omitempty"`
	Ips           []string `protobuf:"bytes,5,rep,name=ips,proto3" json:"ips,omitempty"`
	Query         string   `protobuf:"bytes,6,opt,name=query,proto3" json:"query,omitempty"`
	Response      bool     `protobuf:"varint,7,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *DnsInfo) Reset() {
	*x = DnsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsInfo) ProtoMessage() {}

func (x *DnsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsInfo.ProtoReflect.Descriptor instead.
func (*DnsInfo) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{19}
}

func (x *DnsInfo) GetQuestionTypes() []uint32 {
	if x != nil {
		return x.QuestionTypes
	}
	return nil
}

func (x *DnsInfo) GetAnswerTypes() []uint32 {
	if x != nil {
		return x.AnswerTypes
	}
	return nil
}

func (x *DnsInfo) GetRcode() int32 {
	if x != nil {
		return x.Rcode
	}
	return 0
}

func (x *DnsInfo) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *DnsInfo) GetIps() []string {
	if x != nil {
		return x.Ips
	}
	return nil
}

func (x *DnsInfo) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *DnsInfo) GetResponse() bool {
	if x != nil {
		return x.Response
	}
	return false
}

type ProcessDns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Dns     *DnsInfo `protobuf:"bytes,3,opt,name=dns,proto3" json:"dns,omitempty"`
	// Deprecated: Do not use.
	DestinationNames []string `protobuf:"bytes,4,rep,name=destination_names,json=destinationNames,proto3" json:"destination_names,omitempty"` // deprecated in favor of socket.destination_names.
	DestinationPod   *Pod     `protobuf:"bytes,5,opt,name=destination_pod,json=destinationPod,proto3" json:"destination_pod,omitempty"`
}

func (x *ProcessDns) Reset() {
	*x = ProcessDns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDns) ProtoMessage() {}

func (x *ProcessDns) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDns.ProtoReflect.Descriptor instead.
func (*ProcessDns) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{20}
}

func (x *ProcessDns) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessDns) GetDns() *DnsInfo {
	if x != nil {
		return x.Dns
	}
	return nil
}

// Deprecated: Do not use.
func (x *ProcessDns) GetDestinationNames() []string {
	if x != nil {
		return x.DestinationNames
	}
	return nil
}

func (x *ProcessDns) GetDestinationPod() *Pod {
	if x != nil {
		return x.DestinationPod
	}
	return nil
}

type StackAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address uint64 `protobuf:"varint,1,opt,name=address,proto3" json:"address,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
}

func (x *StackAddress) Reset() {
	*x = StackAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackAddress) ProtoMessage() {}

func (x *StackAddress) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackAddress.ProtoReflect.Descriptor instead.
func (*StackAddress) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{21}
}

func (x *StackAddress) GetAddress() uint64 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *StackAddress) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type StackTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []*StackAddress `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *StackTrace) Reset() {
	*x = StackTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace) ProtoMessage() {}

func (x *StackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace.ProtoReflect.Descriptor instead.
func (*StackTrace) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{22}
}

func (x *StackTrace) GetAddresses() []*StackAddress {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type StackTraceLabel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *StackTraceLabel) Reset() {
	*x = StackTraceLabel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTraceLabel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceLabel) ProtoMessage() {}

func (x *StackTraceLabel) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceLabel.ProtoReflect.Descriptor instead.
func (*StackTraceLabel) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{23}
}

func (x *StackTraceLabel) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *StackTraceLabel) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type StackTraceNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  *StackAddress      `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Count    uint64             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Labels   []*StackTraceLabel `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Children []*StackTraceNode  `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *StackTraceNode) Reset() {
	*x = StackTraceNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StackTraceNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceNode) ProtoMessage() {}

func (x *StackTraceNode) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceNode.ProtoReflect.Descriptor instead.
func (*StackTraceNode) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{24}
}

func (x *StackTraceNode) GetAddress() *StackAddress {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *StackTraceNode) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *StackTraceNode) GetLabels() []*StackTraceLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *StackTraceNode) GetChildren() []*StackTraceNode {
	if x != nil {
		return x.Children
	}
	return nil
}

type ListSensorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListSensorsRequest) Reset() {
	*x = ListSensorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSensorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsRequest) ProtoMessage() {}

func (x *ListSensorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsRequest.ProtoReflect.Descriptor instead.
func (*ListSensorsRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{25}
}

type SensorStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled bool   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *SensorStatus) Reset() {
	*x = SensorStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorStatus) ProtoMessage() {}

func (x *SensorStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorStatus.ProtoReflect.Descriptor instead.
func (*SensorStatus) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{26}
}

func (x *SensorStatus) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SensorStatus) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ListSensorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sensors []*SensorStatus `protobuf:"bytes,1,rep,name=sensors,proto3" json:"sensors,omitempty"`
}

func (x *ListSensorsResponse) Reset() {
	*x = ListSensorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSensorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSensorsResponse) ProtoMessage() {}

func (x *ListSensorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSensorsResponse.ProtoReflect.Descriptor instead.
func (*ListSensorsResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{27}
}

func (x *ListSensorsResponse) GetSensors() []*SensorStatus {
	if x != nil {
		return x.Sensors
	}
	return nil
}

type AddTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaml string `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *AddTracingPolicyRequest) Reset() {
	*x = AddTracingPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTracingPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTracingPolicyRequest) ProtoMessage() {}

func (x *AddTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTracingPolicyRequest.ProtoReflect.Descriptor instead.
func (*AddTracingPolicyRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{28}
}

func (x *AddTracingPolicyRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type AddTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTracingPolicyResponse) Reset() {
	*x = AddTracingPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTracingPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTracingPolicyResponse) ProtoMessage() {}

func (x *AddTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTracingPolicyResponse.ProtoReflect.Descriptor instead.
func (*AddTracingPolicyResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{29}
}

type DeleteTracingPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Yaml string `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
}

func (x *DeleteTracingPolicyRequest) Reset() {
	*x = DeleteTracingPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTracingPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTracingPolicyRequest) ProtoMessage() {}

func (x *DeleteTracingPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTracingPolicyRequest.ProtoReflect.Descriptor instead.
func (*DeleteTracingPolicyRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteTracingPolicyRequest) GetYaml() string {
	if x != nil {
		return x.Yaml
	}
	return ""
}

type DeleteTracingPolicyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTracingPolicyResponse) Reset() {
	*x = DeleteTracingPolicyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTracingPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTracingPolicyResponse) ProtoMessage() {}

func (x *DeleteTracingPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTracingPolicyResponse.ProtoReflect.Descriptor instead.
func (*DeleteTracingPolicyResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{31}
}

type RemoveSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RemoveSensorRequest) Reset() {
	*x = RemoveSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSensorRequest) ProtoMessage() {}

func (x *RemoveSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSensorRequest.ProtoReflect.Descriptor instead.
func (*RemoveSensorRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{32}
}

func (x *RemoveSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RemoveSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSensorResponse) Reset() {
	*x = RemoveSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSensorResponse) ProtoMessage() {}

func (x *RemoveSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSensorResponse.ProtoReflect.Descriptor instead.
func (*RemoveSensorResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{33}
}

type EnableSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EnableSensorRequest) Reset() {
	*x = EnableSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableSensorRequest) ProtoMessage() {}

func (x *EnableSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableSensorRequest.ProtoReflect.Descriptor instead.
func (*EnableSensorRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{34}
}

func (x *EnableSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type EnableSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableSensorResponse) Reset() {
	*x = EnableSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableSensorResponse) ProtoMessage() {}

func (x *EnableSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableSensorResponse.ProtoReflect.Descriptor instead.
func (*EnableSensorResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{35}
}

type DisableSensorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DisableSensorRequest) Reset() {
	*x = DisableSensorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableSensorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableSensorRequest) ProtoMessage() {}

func (x *DisableSensorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableSensorRequest.ProtoReflect.Descriptor instead.
func (*DisableSensorRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{36}
}

func (x *DisableSensorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SetSensorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cfgkey string `protobuf:"bytes,2,opt,name=cfgkey,proto3" json:"cfgkey,omitempty"`
	Cfgval string `protobuf:"bytes,3,opt,name=cfgval,proto3" json:"cfgval,omitempty"`
}

func (x *SetSensorConfigRequest) Reset() {
	*x = SetSensorConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSensorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSensorConfigRequest) ProtoMessage() {}

func (x *SetSensorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSensorConfigRequest.ProtoReflect.Descriptor instead.
func (*SetSensorConfigRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{37}
}

func (x *SetSensorConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SetSensorConfigRequest) GetCfgkey() string {
	if x != nil {
		return x.Cfgkey
	}
	return ""
}

func (x *SetSensorConfigRequest) GetCfgval() string {
	if x != nil {
		return x.Cfgval
	}
	return ""
}

type SetSensorConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSensorConfigResponse) Reset() {
	*x = SetSensorConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSensorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSensorConfigResponse) ProtoMessage() {}

func (x *SetSensorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSensorConfigResponse.ProtoReflect.Descriptor instead.
func (*SetSensorConfigResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{38}
}

type GetSensorConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Cfgkey string `protobuf:"bytes,2,opt,name=cfgkey,proto3" json:"cfgkey,omitempty"`
}

func (x *GetSensorConfigRequest) Reset() {
	*x = GetSensorConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorConfigRequest) ProtoMessage() {}

func (x *GetSensorConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorConfigRequest.ProtoReflect.Descriptor instead.
func (*GetSensorConfigRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{39}
}

func (x *GetSensorConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetSensorConfigRequest) GetCfgkey() string {
	if x != nil {
		return x.Cfgkey
	}
	return ""
}

type GetSensorConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cfgval string `protobuf:"bytes,1,opt,name=cfgval,proto3" json:"cfgval,omitempty"`
}

func (x *GetSensorConfigResponse) Reset() {
	*x = GetSensorConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSensorConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSensorConfigResponse) ProtoMessage() {}

func (x *GetSensorConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSensorConfigResponse.ProtoReflect.Descriptor instead.
func (*GetSensorConfigResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{40}
}

func (x *GetSensorConfigResponse) GetCfgval() string {
	if x != nil {
		return x.Cfgval
	}
	return ""
}

type DisableSensorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DisableSensorResponse) Reset() {
	*x = DisableSensorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableSensorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableSensorResponse) ProtoMessage() {}

func (x *DisableSensorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableSensorResponse.ProtoReflect.Descriptor instead.
func (*DisableSensorResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{41}
}

type GetStackTraceTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetStackTraceTreeRequest) Reset() {
	*x = GetStackTraceTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStackTraceTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStackTraceTreeRequest) ProtoMessage() {}

func (x *GetStackTraceTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStackTraceTreeRequest.ProtoReflect.Descriptor instead.
func (*GetStackTraceTreeRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{42}
}

func (x *GetStackTraceTreeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetStackTraceTreeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root *StackTraceNode `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *GetStackTraceTreeResponse) Reset() {
	*x = GetStackTraceTreeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStackTraceTreeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStackTraceTreeResponse) ProtoMessage() {}

func (x *GetStackTraceTreeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStackTraceTreeResponse.ProtoReflect.Descriptor instead.
func (*GetStackTraceTreeResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{43}
}

func (x *GetStackTraceTreeResponse) GetRoot() *StackTraceNode {
	if x != nil {
		return x.Root
	}
	return nil
}

type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{44}
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{45}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type GetHealthStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSet []HealthStatusType `protobuf:"varint,1,rep,packed,name=event_set,json=eventSet,proto3,enum=tetragon.HealthStatusType" json:"event_set,omitempty"`
}

func (x *GetHealthStatusRequest) Reset() {
	*x = GetHealthStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusRequest) ProtoMessage() {}

func (x *GetHealthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthStatusRequest.ProtoReflect.Descriptor instead.
func (*GetHealthStatusRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{46}
}

func (x *GetHealthStatusRequest) GetEventSet() []HealthStatusType {
	if x != nil {
		return x.EventSet
	}
	return nil
}

type HealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event   HealthStatusType   `protobuf:"varint,1,opt,name=event,proto3,enum=tetragon.HealthStatusType" json:"event,omitempty"`
	Status  HealthStatusResult `protobuf:"varint,2,opt,name=status,proto3,enum=tetragon.HealthStatusResult" json:"status,omitempty"`
	Details string             `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{47}
}

func (x *HealthStatus) GetEvent() HealthStatusType {
	if x != nil {
		return x.Event
	}
	return HealthStatusType_HEALTH_STATUS_TYPE_UNDEF
}

func (x *HealthStatus) GetStatus() HealthStatusResult {
	if x != nil {
		return x.Status
	}
	return HealthStatusResult_HEALTH_STATUS_UNDEF
}

func (x *HealthStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type GetHealthStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthStatus []*HealthStatus `protobuf:"bytes,1,rep,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
}

func (x *GetHealthStatusResponse) Reset() {
	*x = GetHealthStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusResponse) ProtoMessage() {}

func (x *GetHealthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthStatusResponse.ProtoReflect.Descriptor instead.
func (*GetHealthStatusResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{48}
}

func (x *GetHealthStatusResponse) GetHealthStatus() []*HealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

// AggregationOptions defines configuration options for aggregating events.
type AggregationOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Aggregation window size. Defaults to 15 seconds if this field is not set.
	WindowSize *durationpb.Duration `protobuf:"bytes,1,opt,name=window_size,json=windowSize,proto3" json:"window_size,omitempty"`
	// Size of the buffer for the aggregator to receive incoming events. If the
	// buffer becomes full, the aggregator will log a warning and start dropping
	// incoming events.
	ChannelBufferSize uint64 `protobuf:"varint,2,opt,name=channel_buffer_size,json=channelBufferSize,proto3" json:"channel_buffer_size,omitempty"`
}

func (x *AggregationOptions) Reset() {
	*x = AggregationOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationOptions) ProtoMessage() {}

func (x *AggregationOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationOptions.ProtoReflect.Descriptor instead.
func (*AggregationOptions) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{49}
}

func (x *AggregationOptions) GetWindowSize() *durationpb.Duration {
	if x != nil {
		return x.WindowSize
	}
	return nil
}

func (x *AggregationOptions) GetChannelBufferSize() uint64 {
	if x != nil {
		return x.ChannelBufferSize
	}
	return 0
}

type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// allow_list specifies a list of filters to apply to only return certain
	// events. If multiple filters are specified, at least one of them has to
	// match for an event to be included in the results.
	AllowList []*Filter `protobuf:"bytes,1,rep,name=allow_list,json=allowList,proto3" json:"allow_list,omitempty"`
	// deny_list specifies a list of filters to apply to exclude certain events
	// from the results. If multiple filters are specified, at least one of
	// them has to match for an event to be excluded.
	//
	// If both allow_list and deny_list are specified, the results contain the
	// set difference allow_list - deny_list.
	DenyList []*Filter `protobuf:"bytes,2,rep,name=deny_list,json=denyList,proto3" json:"deny_list,omitempty"`
	// aggregation_options configures aggregation options for this request.
	// If this field is not set, responses will not be aggregated.
	//
	// Note that currently only process_accept and process_connect events are
	// aggregated. Other events remain unaggregated.
	AggregationOptions *AggregationOptions `protobuf:"bytes,3,opt,name=aggregation_options,json=aggregationOptions,proto3" json:"aggregation_options,omitempty"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{50}
}

func (x *GetEventsRequest) GetAllowList() []*Filter {
	if x != nil {
		return x.AllowList
	}
	return nil
}

func (x *GetEventsRequest) GetDenyList() []*Filter {
	if x != nil {
		return x.DenyList
	}
	return nil
}

func (x *GetEventsRequest) GetAggregationOptions() *AggregationOptions {
	if x != nil {
		return x.AggregationOptions
	}
	return nil
}

// AggregationInfo contains information about aggregation results.
type AggregationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total count of events in this aggregation time window.
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AggregationInfo) Reset() {
	*x = AggregationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationInfo) ProtoMessage() {}

func (x *AggregationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationInfo.ProtoReflect.Descriptor instead.
func (*AggregationInfo) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{51}
}

func (x *AggregationInfo) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//	*GetEventsResponse_ProcessExec
	//	*GetEventsResponse_ProcessExit
	//	*GetEventsResponse_ProcessKprobe
	//	*GetEventsResponse_ProcessTracepoint
	//	*GetEventsResponse_ProcessDns
	//	*GetEventsResponse_Test
	Event isGetEventsResponse_Event `protobuf_oneof:"event"`
	// Name of the node where this event was observed.
	NodeName string `protobuf:"bytes,1000,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Timestamp at which this event was observed.
	//
	// For an aggregated response, this field to set to the timestamp at which
	// the event was observed for the first time in a given aggregation time window.
	Time *timestamppb.Timestamp `protobuf:"bytes,1001,opt,name=time,proto3" json:"time,omitempty"`
	// aggregation_info contains information about aggregation results. This field
	// is set only for aggregated responses.
	AggregationInfo *AggregationInfo `protobuf:"bytes,1002,opt,name=aggregation_info,json=aggregationInfo,proto3" json:"aggregation_info,omitempty"`
}

func (x *GetEventsResponse) Reset() {
	*x = GetEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsResponse) ProtoMessage() {}

func (x *GetEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{52}
}

func (m *GetEventsResponse) GetEvent() isGetEventsResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *GetEventsResponse) GetProcessExec() *ProcessExec {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessExec); ok {
		return x.ProcessExec
	}
	return nil
}

func (x *GetEventsResponse) GetProcessExit() *ProcessExit {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessExit); ok {
		return x.ProcessExit
	}
	return nil
}

func (x *GetEventsResponse) GetProcessKprobe() *ProcessKprobe {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessKprobe); ok {
		return x.ProcessKprobe
	}
	return nil
}

func (x *GetEventsResponse) GetProcessTracepoint() *ProcessTracepoint {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessTracepoint); ok {
		return x.ProcessTracepoint
	}
	return nil
}

func (x *GetEventsResponse) GetProcessDns() *ProcessDns {
	if x, ok := x.GetEvent().(*GetEventsResponse_ProcessDns); ok {
		return x.ProcessDns
	}
	return nil
}

func (x *GetEventsResponse) GetTest() *Test {
	if x, ok := x.GetEvent().(*GetEventsResponse_Test); ok {
		return x.Test
	}
	return nil
}

func (x *GetEventsResponse) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *GetEventsResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *GetEventsResponse) GetAggregationInfo() *AggregationInfo {
	if x != nil {
		return x.AggregationInfo
	}
	return nil
}

type isGetEventsResponse_Event interface {
	isGetEventsResponse_Event()
}

type GetEventsResponse_ProcessExec struct {
	ProcessExec *ProcessExec `protobuf:"bytes,1,opt,name=process_exec,json=processExec,proto3,oneof"`
}

type GetEventsResponse_ProcessExit struct {
	ProcessExit *ProcessExit `protobuf:"bytes,5,opt,name=process_exit,json=processExit,proto3,oneof"`
}

type GetEventsResponse_ProcessKprobe struct {
	ProcessKprobe *ProcessKprobe `protobuf:"bytes,9,opt,name=process_kprobe,json=processKprobe,proto3,oneof"`
}

type GetEventsResponse_ProcessTracepoint struct {
	ProcessTracepoint *ProcessTracepoint `protobuf:"bytes,10,opt,name=process_tracepoint,json=processTracepoint,proto3,oneof"`
}

type GetEventsResponse_ProcessDns struct {
	ProcessDns *ProcessDns `protobuf:"bytes,14,opt,name=process_dns,json=processDns,proto3,oneof"`
}

type GetEventsResponse_Test struct {
	Test *Test `protobuf:"bytes,40000,opt,name=test,proto3,oneof"`
}

func (*GetEventsResponse_ProcessExec) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessExit) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessKprobe) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessTracepoint) isGetEventsResponse_Event() {}

func (*GetEventsResponse_ProcessDns) isGetEventsResponse_Event() {}

func (*GetEventsResponse_Test) isGetEventsResponse_Event() {}

type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BinaryRegex []string              `protobuf:"bytes,1,rep,name=binary_regex,json=binaryRegex,proto3" json:"binary_regex,omitempty"`
	Namespace   []string              `protobuf:"bytes,2,rep,name=namespace,proto3" json:"namespace,omitempty"`
	HealthCheck *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=health_check,json=healthCheck,proto3" json:"health_check,omitempty"`
	Pid         []uint32              `protobuf:"varint,4,rep,packed,name=pid,proto3" json:"pid,omitempty"`
	PidSet      []uint32              `protobuf:"varint,5,rep,packed,name=pid_set,json=pidSet,proto3" json:"pid_set,omitempty"`
	EventSet    []EventType           `protobuf:"varint,6,rep,packed,name=event_set,json=eventSet,proto3,enum=tetragon.EventType" json:"event_set,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{53}
}

func (x *Filter) GetBinaryRegex() []string {
	if x != nil {
		return x.BinaryRegex
	}
	return nil
}

func (x *Filter) GetNamespace() []string {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *Filter) GetHealthCheck() *wrapperspb.BoolValue {
	if x != nil {
		return x.HealthCheck
	}
	return nil
}

func (x *Filter) GetPid() []uint32 {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Filter) GetPidSet() []uint32 {
	if x != nil {
		return x.PidSet
	}
	return nil
}

func (x *Filter) GetEventSet() []EventType {
	if x != nil {
		return x.EventSet
	}
	return nil
}

var File_tetragon_tetragon_proto protoreflect.FileDescriptor

var file_tetragon_tetragon_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xeb, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22,
	0x82, 0x01, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73,
	0x74, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x03, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x03, 0x75, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x69, 0x70, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x69, 0x70, 0x63, 0x12, 0x25,
	0x0a, 0x03, 0x6d, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x03, 0x6d, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x10,
	0x70, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x69, 0x64,
	0x46, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x6e,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x6e,
	0x65, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06,
	0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x06, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x94, 0x04, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x04, 0x61, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x75,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x03,
	0x70, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x66, 0x63, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x61, 0x70,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x03,
	0x63, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x02, 0x6e, 0x73, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0a, 0x4b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x09, 0x4b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x53, 0x6b, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x61,
	0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x64, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x65, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x4f, 0x6c, 0x65,
	0x6e, 0x22, 0x4c, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x4c, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0x50, 0x0a,
	0x14, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41,
	0x72, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xfa, 0x03, 0x0a, 0x0e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x72, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x12,
	0x2e, 0x0a, 0x07, 0x73, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x53, 0x6b, 0x62, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6b, 0x62, 0x41, 0x72, 0x67, 0x12,
	0x1b, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x41, 0x72, 0x67, 0x12, 0x1d, 0x0a, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74, 0x68, 0x41, 0x72, 0x67, 0x12, 0x31,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x72,
	0x67, 0x12, 0x50, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x48, 0x00,
	0x52, 0x11, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x72, 0x67, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x73,
	0x6f, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x6f, 0x6e,
	0x67, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x6c,
	0x6f, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x22, 0x9c, 0x02,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01, 0x0a,
	0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x62, 0x73, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62, 0x73,
	0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x67, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x67, 0x33, 0x22, 0xc3,
	0x01, 0x0a, 0x07, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x44, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x44, 0x6e, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x0e,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x64, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0x40, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x42, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x39, 0x0a, 0x0f, 0x53, 0x74,
	0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x47, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x07, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x1a, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x79,
	0x61, 0x6d, 0x6c, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x16, 0x0a,
	0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x16, 0x0a, 0x14, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5c, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x66, 0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x66,
	0x67, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x67, 0x76,
	0x61, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x44, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x66, 0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x66, 0x67,
	0x6b, 0x65, 0x79, 0x22, 0x31, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x66, 0x67, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x66, 0x67, 0x76, 0x61, 0x6c, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x80, 0x01,
	0x0a, 0x12, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x2e, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0xc1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x65, 0x6e, 0x79, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x08, 0x64, 0x65, 0x6e,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x12, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x04,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x12,
	0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x69, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x12, 0x4c, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x44, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x44, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0xc0, 0xb8, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xea, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x06,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x69, 0x64, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x70, 0x69, 0x64, 0x53, 0x65,
	0x74, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x2a, 0xcc, 0x01, 0x0a, 0x0c, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x50, 0x52, 0x4f, 0x42,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x46,
	0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x49, 0x47, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x1c,
	0x0a, 0x18, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x46, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16,
	0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x50, 0x52, 0x4f,
	0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x46, 0x44,
	0x10, 0x06, 0x2a, 0x4f, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x10, 0x01, 0x2a, 0x7c, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41, 0x4c,
	0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x2a, 0x82, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x07, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x52,
	0x41, 0x43, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4e, 0x53, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x04, 0x54,
	0x45, 0x53, 0x54, 0x10, 0xfe, 0x01, 0x2a, 0xa4, 0x06, 0x0a, 0x10, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x50, 0x5f, 0x43, 0x48, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41,
	0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x41, 0x50, 0x5f, 0x44, 0x41, 0x43, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x46, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x46, 0x53, 0x45,
	0x54, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x50, 0x5f, 0x4b, 0x49, 0x4c,
	0x4c, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x47, 0x49,
	0x44, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x55, 0x49,
	0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x45, 0x54, 0x50, 0x43,
	0x41, 0x50, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x55,
	0x58, 0x5f, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f, 0x4e,
	0x45, 0x54, 0x5f, 0x42, 0x52, 0x4f, 0x41, 0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x0b, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x52, 0x41, 0x57,
	0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x43, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x49, 0x50, 0x43, 0x5f,
	0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x53,
	0x59, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x10, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x41, 0x57, 0x49, 0x4f, 0x10, 0x11, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x43, 0x48, 0x52, 0x4f, 0x4f, 0x54,
	0x10, 0x12, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x50, 0x54,
	0x52, 0x41, 0x43, 0x45, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59,
	0x53, 0x5f, 0x50, 0x41, 0x43, 0x43, 0x54, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50,
	0x5f, 0x53, 0x59, 0x53, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x16, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x4e, 0x49, 0x43, 0x45, 0x10, 0x17,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x18, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59,
	0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41, 0x50, 0x5f,
	0x53, 0x59, 0x53, 0x5f, 0x54, 0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x1a,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x4b, 0x4e, 0x4f, 0x44, 0x10, 0x1b, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x50, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x1c, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x41, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x1d, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41,
	0x50, 0x5f, 0x53, 0x45, 0x54, 0x46, 0x43, 0x41, 0x50, 0x10, 0x1f, 0x12, 0x14, 0x0a, 0x10, 0x43,
	0x41, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10,
	0x20, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x50, 0x5f, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x44, 0x4d,
	0x49, 0x4e, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x53, 0x4c,
	0x4f, 0x47, 0x10, 0x22, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x57, 0x41, 0x4b, 0x45,
	0x5f, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x41, 0x50, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x24, 0x12,
	0x12, 0x0a, 0x0e, 0x43, 0x41, 0x50, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4d,
	0x4f, 0x4e, 0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50, 0x5f, 0x42, 0x50, 0x46, 0x10,
	0x27, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x50, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x28, 0x32, 0xb3, 0x07,
	0x0a, 0x13, 0x46, 0x69, 0x6e, 0x65, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x48, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x52, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x20, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x1d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4c, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73,
	0x12, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12,
	0x1d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x22, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x63, 0x69, 0x6c, 0x69, 0x75, 0x6d, 0x2f, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tetragon_tetragon_proto_rawDescOnce sync.Once
	file_tetragon_tetragon_proto_rawDescData = file_tetragon_tetragon_proto_rawDesc
)

func file_tetragon_tetragon_proto_rawDescGZIP() []byte {
	file_tetragon_tetragon_proto_rawDescOnce.Do(func() {
		file_tetragon_tetragon_proto_rawDescData = protoimpl.X.CompressGZIP(file_tetragon_tetragon_proto_rawDescData)
	})
	return file_tetragon_tetragon_proto_rawDescData
}

var file_tetragon_tetragon_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_tetragon_tetragon_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_tetragon_tetragon_proto_goTypes = []interface{}{
	(KprobeAction)(0),                   // 0: tetragon.KprobeAction
	(HealthStatusType)(0),               // 1: tetragon.HealthStatusType
	(HealthStatusResult)(0),             // 2: tetragon.HealthStatusResult
	(EventType)(0),                      // 3: tetragon.EventType
	(CapabilitiesType)(0),               // 4: tetragon.CapabilitiesType
	(*Image)(nil),                       // 5: tetragon.Image
	(*Container)(nil),                   // 6: tetragon.Container
	(*Pod)(nil),                         // 7: tetragon.Pod
	(*Capabilities)(nil),                // 8: tetragon.Capabilities
	(*Namespace)(nil),                   // 9: tetragon.Namespace
	(*Namespaces)(nil),                  // 10: tetragon.Namespaces
	(*Process)(nil),                     // 11: tetragon.Process
	(*ProcessExec)(nil),                 // 12: tetragon.ProcessExec
	(*ProcessExit)(nil),                 // 13: tetragon.ProcessExit
	(*KprobeSock)(nil),                  // 14: tetragon.KprobeSock
	(*KprobeSkb)(nil),                   // 15: tetragon.KprobeSkb
	(*KprobePath)(nil),                  // 16: tetragon.KprobePath
	(*KprobeFile)(nil),                  // 17: tetragon.KprobeFile
	(*KprobeTruncatedBytes)(nil),        // 18: tetragon.KprobeTruncatedBytes
	(*KprobeCred)(nil),                  // 19: tetragon.KprobeCred
	(*KprobeArgument)(nil),              // 20: tetragon.KprobeArgument
	(*ProcessKprobe)(nil),               // 21: tetragon.ProcessKprobe
	(*ProcessTracepoint)(nil),           // 22: tetragon.ProcessTracepoint
	(*Test)(nil),                        // 23: tetragon.Test
	(*DnsInfo)(nil),                     // 24: tetragon.DnsInfo
	(*ProcessDns)(nil),                  // 25: tetragon.ProcessDns
	(*StackAddress)(nil),                // 26: tetragon.StackAddress
	(*StackTrace)(nil),                  // 27: tetragon.StackTrace
	(*StackTraceLabel)(nil),             // 28: tetragon.StackTraceLabel
	(*StackTraceNode)(nil),              // 29: tetragon.StackTraceNode
	(*ListSensorsRequest)(nil),          // 30: tetragon.ListSensorsRequest
	(*SensorStatus)(nil),                // 31: tetragon.SensorStatus
	(*ListSensorsResponse)(nil),         // 32: tetragon.ListSensorsResponse
	(*AddTracingPolicyRequest)(nil),     // 33: tetragon.AddTracingPolicyRequest
	(*AddTracingPolicyResponse)(nil),    // 34: tetragon.AddTracingPolicyResponse
	(*DeleteTracingPolicyRequest)(nil),  // 35: tetragon.DeleteTracingPolicyRequest
	(*DeleteTracingPolicyResponse)(nil), // 36: tetragon.DeleteTracingPolicyResponse
	(*RemoveSensorRequest)(nil),         // 37: tetragon.RemoveSensorRequest
	(*RemoveSensorResponse)(nil),        // 38: tetragon.RemoveSensorResponse
	(*EnableSensorRequest)(nil),         // 39: tetragon.EnableSensorRequest
	(*EnableSensorResponse)(nil),        // 40: tetragon.EnableSensorResponse
	(*DisableSensorRequest)(nil),        // 41: tetragon.DisableSensorRequest
	(*SetSensorConfigRequest)(nil),      // 42: tetragon.SetSensorConfigRequest
	(*SetSensorConfigResponse)(nil),     // 43: tetragon.SetSensorConfigResponse
	(*GetSensorConfigRequest)(nil),      // 44: tetragon.GetSensorConfigRequest
	(*GetSensorConfigResponse)(nil),     // 45: tetragon.GetSensorConfigResponse
	(*DisableSensorResponse)(nil),       // 46: tetragon.DisableSensorResponse
	(*GetStackTraceTreeRequest)(nil),    // 47: tetragon.GetStackTraceTreeRequest
	(*GetStackTraceTreeResponse)(nil),   // 48: tetragon.GetStackTraceTreeResponse
	(*GetVersionRequest)(nil),           // 49: tetragon.GetVersionRequest
	(*GetVersionResponse)(nil),          // 50: tetragon.GetVersionResponse
	(*GetHealthStatusRequest)(nil),      // 51: tetragon.GetHealthStatusRequest
	(*HealthStatus)(nil),                // 52: tetragon.HealthStatus
	(*GetHealthStatusResponse)(nil),     // 53: tetragon.GetHealthStatusResponse
	(*AggregationOptions)(nil),          // 54: tetragon.AggregationOptions
	(*GetEventsRequest)(nil),            // 55: tetragon.GetEventsRequest
	(*AggregationInfo)(nil),             // 56: tetragon.AggregationInfo
	(*GetEventsResponse)(nil),           // 57: tetragon.GetEventsResponse
	(*Filter)(nil),                      // 58: tetragon.Filter
	(*timestamppb.Timestamp)(nil),       // 59: google.protobuf.Timestamp
	(*wrapperspb.UInt32Value)(nil),      // 60: google.protobuf.UInt32Value
	(*durationpb.Duration)(nil),         // 61: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),        // 62: google.protobuf.BoolValue
}
var file_tetragon_tetragon_proto_depIdxs = []int32{
	5,  // 0: tetragon.Container.image:type_name -> tetragon.Image
	59, // 1: tetragon.Container.start_time:type_name -> google.protobuf.Timestamp
	60, // 2: tetragon.Container.pid:type_name -> google.protobuf.UInt32Value
	6,  // 3: tetragon.Pod.container:type_name -> tetragon.Container
	4,  // 4: tetragon.Capabilities.permitted:type_name -> tetragon.CapabilitiesType
	4,  // 5: tetragon.Capabilities.effective:type_name -> tetragon.CapabilitiesType
	4,  // 6: tetragon.Capabilities.inheritable:type_name -> tetragon.CapabilitiesType
	9,  // 7: tetragon.Namespaces.uts:type_name -> tetragon.Namespace
	9,  // 8: tetragon.Namespaces.ipc:type_name -> tetragon.Namespace
	9,  // 9: tetragon.Namespaces.mnt:type_name -> tetragon.Namespace
	9,  // 10: tetragon.Namespaces.pid:type_name -> tetragon.Namespace
	9,  // 11: tetragon.Namespaces.pid_for_children:type_name -> tetragon.Namespace
	9,  // 12: tetragon.Namespaces.net:type_name -> tetragon.Namespace
	9,  // 13: tetragon.Namespaces.time:type_name -> tetragon.Namespace
	9,  // 14: tetragon.Namespaces.time_for_children:type_name -> tetragon.Namespace
	9,  // 15: tetragon.Namespaces.cgroup:type_name -> tetragon.Namespace
	9,  // 16: tetragon.Namespaces.user:type_name -> tetragon.Namespace
	60, // 17: tetragon.Process.pid:type_name -> google.protobuf.UInt32Value
	60, // 18: tetragon.Process.uid:type_name -> google.protobuf.UInt32Value
	59, // 19: tetragon.Process.start_time:type_name -> google.protobuf.Timestamp
	60, // 20: tetragon.Process.auid:type_name -> google.protobuf.UInt32Value
	7,  // 21: tetragon.Process.pod:type_name -> tetragon.Pod
	8,  // 22: tetragon.Process.cap:type_name -> tetragon.Capabilities
	10, // 23: tetragon.Process.ns:type_name -> tetragon.Namespaces
	11, // 24: tetragon.ProcessExec.process:type_name -> tetragon.Process
	11, // 25: tetragon.ProcessExec.parent:type_name -> tetragon.Process
	11, // 26: tetragon.ProcessExec.ancestors:type_name -> tetragon.Process
	11, // 27: tetragon.ProcessExit.process:type_name -> tetragon.Process
	11, // 28: tetragon.ProcessExit.parent:type_name -> tetragon.Process
	4,  // 29: tetragon.KprobeCred.permitted:type_name -> tetragon.CapabilitiesType
	4,  // 30: tetragon.KprobeCred.effective:type_name -> tetragon.CapabilitiesType
	4,  // 31: tetragon.KprobeCred.inheritable:type_name -> tetragon.CapabilitiesType
	15, // 32: tetragon.KprobeArgument.skb_arg:type_name -> tetragon.KprobeSkb
	16, // 33: tetragon.KprobeArgument.path_arg:type_name -> tetragon.KprobePath
	17, // 34: tetragon.KprobeArgument.file_arg:type_name -> tetragon.KprobeFile
	18, // 35: tetragon.KprobeArgument.truncated_bytes_arg:type_name -> tetragon.KprobeTruncatedBytes
	14, // 36: tetragon.KprobeArgument.sock_arg:type_name -> tetragon.KprobeSock
	19, // 37: tetragon.KprobeArgument.cred_arg:type_name -> tetragon.KprobeCred
	11, // 38: tetragon.ProcessKprobe.process:type_name -> tetragon.Process
	11, // 39: tetragon.ProcessKprobe.parent:type_name -> tetragon.Process
	20, // 40: tetragon.ProcessKprobe.args:type_name -> tetragon.KprobeArgument
	20, // 41: tetragon.ProcessKprobe.return:type_name -> tetragon.KprobeArgument
	0,  // 42: tetragon.ProcessKprobe.action:type_name -> tetragon.KprobeAction
	11, // 43: tetragon.ProcessTracepoint.process:type_name -> tetragon.Process
	11, // 44: tetragon.ProcessTracepoint.parent:type_name -> tetragon.Process
	20, // 45: tetragon.ProcessTracepoint.args:type_name -> tetragon.KprobeArgument
	11, // 46: tetragon.ProcessDns.process:type_name -> tetragon.Process
	24, // 47: tetragon.ProcessDns.dns:type_name -> tetragon.DnsInfo
	7,  // 48: tetragon.ProcessDns.destination_pod:type_name -> tetragon.Pod
	26, // 49: tetragon.StackTrace.addresses:type_name -> tetragon.StackAddress
	26, // 50: tetragon.StackTraceNode.address:type_name -> tetragon.StackAddress
	28, // 51: tetragon.StackTraceNode.labels:type_name -> tetragon.StackTraceLabel
	29, // 52: tetragon.StackTraceNode.children:type_name -> tetragon.StackTraceNode
	31, // 53: tetragon.ListSensorsResponse.sensors:type_name -> tetragon.SensorStatus
	29, // 54: tetragon.GetStackTraceTreeResponse.root:type_name -> tetragon.StackTraceNode
	1,  // 55: tetragon.GetHealthStatusRequest.event_set:type_name -> tetragon.HealthStatusType
	1,  // 56: tetragon.HealthStatus.event:type_name -> tetragon.HealthStatusType
	2,  // 57: tetragon.HealthStatus.status:type_name -> tetragon.HealthStatusResult
	52, // 58: tetragon.GetHealthStatusResponse.health_status:type_name -> tetragon.HealthStatus
	61, // 59: tetragon.AggregationOptions.window_size:type_name -> google.protobuf.Duration
	58, // 60: tetragon.GetEventsRequest.allow_list:type_name -> tetragon.Filter
	58, // 61: tetragon.GetEventsRequest.deny_list:type_name -> tetragon.Filter
	54, // 62: tetragon.GetEventsRequest.aggregation_options:type_name -> tetragon.AggregationOptions
	12, // 63: tetragon.GetEventsResponse.process_exec:type_name -> tetragon.ProcessExec
	13, // 64: tetragon.GetEventsResponse.process_exit:type_name -> tetragon.ProcessExit
	21, // 65: tetragon.GetEventsResponse.process_kprobe:type_name -> tetragon.ProcessKprobe
	22, // 66: tetragon.GetEventsResponse.process_tracepoint:type_name -> tetragon.ProcessTracepoint
	25, // 67: tetragon.GetEventsResponse.process_dns:type_name -> tetragon.ProcessDns
	23, // 68: tetragon.GetEventsResponse.test:type_name -> tetragon.Test
	59, // 69: tetragon.GetEventsResponse.time:type_name -> google.protobuf.Timestamp
	56, // 70: tetragon.GetEventsResponse.aggregation_info:type_name -> tetragon.AggregationInfo
	62, // 71: tetragon.Filter.health_check:type_name -> google.protobuf.BoolValue
	3,  // 72: tetragon.Filter.event_set:type_name -> tetragon.EventType
	55, // 73: tetragon.FineGuidanceSensors.GetEvents:input_type -> tetragon.GetEventsRequest
	51, // 74: tetragon.FineGuidanceSensors.GetHealth:input_type -> tetragon.GetHealthStatusRequest
	33, // 75: tetragon.FineGuidanceSensors.AddTracingPolicy:input_type -> tetragon.AddTracingPolicyRequest
	37, // 76: tetragon.FineGuidanceSensors.RemoveSensor:input_type -> tetragon.RemoveSensorRequest
	30, // 77: tetragon.FineGuidanceSensors.ListSensors:input_type -> tetragon.ListSensorsRequest
	39, // 78: tetragon.FineGuidanceSensors.EnableSensor:input_type -> tetragon.EnableSensorRequest
	41, // 79: tetragon.FineGuidanceSensors.DisableSensor:input_type -> tetragon.DisableSensorRequest
	42, // 80: tetragon.FineGuidanceSensors.SetSensorConfig:input_type -> tetragon.SetSensorConfigRequest
	44, // 81: tetragon.FineGuidanceSensors.GetSensorConfig:input_type -> tetragon.GetSensorConfigRequest
	47, // 82: tetragon.FineGuidanceSensors.GetStackTraceTree:input_type -> tetragon.GetStackTraceTreeRequest
	49, // 83: tetragon.FineGuidanceSensors.GetVersion:input_type -> tetragon.GetVersionRequest
	57, // 84: tetragon.FineGuidanceSensors.GetEvents:output_type -> tetragon.GetEventsResponse
	53, // 85: tetragon.FineGuidanceSensors.GetHealth:output_type -> tetragon.GetHealthStatusResponse
	34, // 86: tetragon.FineGuidanceSensors.AddTracingPolicy:output_type -> tetragon.AddTracingPolicyResponse
	38, // 87: tetragon.FineGuidanceSensors.RemoveSensor:output_type -> tetragon.RemoveSensorResponse
	32, // 88: tetragon.FineGuidanceSensors.ListSensors:output_type -> tetragon.ListSensorsResponse
	40, // 89: tetragon.FineGuidanceSensors.EnableSensor:output_type -> tetragon.EnableSensorResponse
	46, // 90: tetragon.FineGuidanceSensors.DisableSensor:output_type -> tetragon.DisableSensorResponse
	43, // 91: tetragon.FineGuidanceSensors.SetSensorConfig:output_type -> tetragon.SetSensorConfigResponse
	45, // 92: tetragon.FineGuidanceSensors.GetSensorConfig:output_type -> tetragon.GetSensorConfigResponse
	48, // 93: tetragon.FineGuidanceSensors.GetStackTraceTree:output_type -> tetragon.GetStackTraceTreeResponse
	50, // 94: tetragon.FineGuidanceSensors.GetVersion:output_type -> tetragon.GetVersionResponse
	84, // [84:95] is the sub-list for method output_type
	73, // [73:84] is the sub-list for method input_type
	73, // [73:73] is the sub-list for extension type_name
	73, // [73:73] is the sub-list for extension extendee
	0,  // [0:73] is the sub-list for field type_name
}

func init() { file_tetragon_tetragon_proto_init() }
func file_tetragon_tetragon_proto_init() {
	if File_tetragon_tetragon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tetragon_tetragon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeSock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeSkb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeTruncatedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeCred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessKprobe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTracepoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessDns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTraceLabel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StackTraceNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSensorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSensorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTracingPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTracingPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTracingPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTracingPolicyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableSensorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSensorConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSensorConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSensorConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableSensorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStackTraceTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStackTraceTreeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tetragon_tetragon_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*KprobeArgument_StringArg)(nil),
		(*KprobeArgument_IntArg)(nil),
		(*KprobeArgument_SkbArg)(nil),
		(*KprobeArgument_SizeArg)(nil),
		(*KprobeArgument_BytesArg)(nil),
		(*KprobeArgument_PathArg)(nil),
		(*KprobeArgument_FileArg)(nil),
		(*KprobeArgument_TruncatedBytesArg)(nil),
		(*KprobeArgument_SockArg)(nil),
		(*KprobeArgument_CredArg)(nil),
		(*KprobeArgument_LongArg)(nil),
	}
	file_tetragon_tetragon_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*GetEventsResponse_ProcessExec)(nil),
		(*GetEventsResponse_ProcessExit)(nil),
		(*GetEventsResponse_ProcessKprobe)(nil),
		(*GetEventsResponse_ProcessTracepoint)(nil),
		(*GetEventsResponse_ProcessDns)(nil),
		(*GetEventsResponse_Test)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tetragon_tetragon_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tetragon_tetragon_proto_goTypes,
		DependencyIndexes: file_tetragon_tetragon_proto_depIdxs,
		EnumInfos:         file_tetragon_tetragon_proto_enumTypes,
		MessageInfos:      file_tetragon_tetragon_proto_msgTypes,
	}.Build()
	File_tetragon_tetragon_proto = out.File
	file_tetragon_tetragon_proto_rawDesc = nil
	file_tetragon_tetragon_proto_goTypes = nil
	file_tetragon_tetragon_proto_depIdxs = nil
}
