// Copyright 2020 Authors of Hubble
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: tetragon/tetragon.proto

package tetragon

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KprobeAction int32

const (
	KprobeAction_KPROBE_ACTION_UNKNOWN    KprobeAction = 0
	KprobeAction_KPROBE_ACTION_POST       KprobeAction = 1
	KprobeAction_KPROBE_ACTION_FOLLOWFD   KprobeAction = 2
	KprobeAction_KPROBE_ACTION_SIGKILL    KprobeAction = 3
	KprobeAction_KPROBE_ACTION_UNFOLLOWFD KprobeAction = 4
	KprobeAction_KPROBE_ACTION_OVERRIDE   KprobeAction = 5
	KprobeAction_KPROBE_ACTION_COPYFD     KprobeAction = 6
	KprobeAction_KPROBE_ACTION_GETURL     KprobeAction = 7
	KprobeAction_KPROBE_ACTION_DNSLOOKUP  KprobeAction = 8
)

// Enum value maps for KprobeAction.
var (
	KprobeAction_name = map[int32]string{
		0: "KPROBE_ACTION_UNKNOWN",
		1: "KPROBE_ACTION_POST",
		2: "KPROBE_ACTION_FOLLOWFD",
		3: "KPROBE_ACTION_SIGKILL",
		4: "KPROBE_ACTION_UNFOLLOWFD",
		5: "KPROBE_ACTION_OVERRIDE",
		6: "KPROBE_ACTION_COPYFD",
		7: "KPROBE_ACTION_GETURL",
		8: "KPROBE_ACTION_DNSLOOKUP",
	}
	KprobeAction_value = map[string]int32{
		"KPROBE_ACTION_UNKNOWN":    0,
		"KPROBE_ACTION_POST":       1,
		"KPROBE_ACTION_FOLLOWFD":   2,
		"KPROBE_ACTION_SIGKILL":    3,
		"KPROBE_ACTION_UNFOLLOWFD": 4,
		"KPROBE_ACTION_OVERRIDE":   5,
		"KPROBE_ACTION_COPYFD":     6,
		"KPROBE_ACTION_GETURL":     7,
		"KPROBE_ACTION_DNSLOOKUP":  8,
	}
)

func (x KprobeAction) Enum() *KprobeAction {
	p := new(KprobeAction)
	*p = x
	return p
}

func (x KprobeAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KprobeAction) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[0].Descriptor()
}

func (KprobeAction) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[0]
}

func (x KprobeAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KprobeAction.Descriptor instead.
func (KprobeAction) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{0}
}

type HealthStatusType int32

const (
	HealthStatusType_HEALTH_STATUS_TYPE_UNDEF  HealthStatusType = 0
	HealthStatusType_HEALTH_STATUS_TYPE_STATUS HealthStatusType = 1
)

// Enum value maps for HealthStatusType.
var (
	HealthStatusType_name = map[int32]string{
		0: "HEALTH_STATUS_TYPE_UNDEF",
		1: "HEALTH_STATUS_TYPE_STATUS",
	}
	HealthStatusType_value = map[string]int32{
		"HEALTH_STATUS_TYPE_UNDEF":  0,
		"HEALTH_STATUS_TYPE_STATUS": 1,
	}
)

func (x HealthStatusType) Enum() *HealthStatusType {
	p := new(HealthStatusType)
	*p = x
	return p
}

func (x HealthStatusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatusType) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[1].Descriptor()
}

func (HealthStatusType) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[1]
}

func (x HealthStatusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatusType.Descriptor instead.
func (HealthStatusType) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{1}
}

type HealthStatusResult int32

const (
	HealthStatusResult_HEALTH_STATUS_UNDEF   HealthStatusResult = 0
	HealthStatusResult_HEALTH_STATUS_RUNNING HealthStatusResult = 1
	HealthStatusResult_HEALTH_STATUS_STOPPED HealthStatusResult = 2
	HealthStatusResult_HEALTH_STATUS_ERROR   HealthStatusResult = 3
)

// Enum value maps for HealthStatusResult.
var (
	HealthStatusResult_name = map[int32]string{
		0: "HEALTH_STATUS_UNDEF",
		1: "HEALTH_STATUS_RUNNING",
		2: "HEALTH_STATUS_STOPPED",
		3: "HEALTH_STATUS_ERROR",
	}
	HealthStatusResult_value = map[string]int32{
		"HEALTH_STATUS_UNDEF":   0,
		"HEALTH_STATUS_RUNNING": 1,
		"HEALTH_STATUS_STOPPED": 2,
		"HEALTH_STATUS_ERROR":   3,
	}
)

func (x HealthStatusResult) Enum() *HealthStatusResult {
	p := new(HealthStatusResult)
	*p = x
	return p
}

func (x HealthStatusResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatusResult) Descriptor() protoreflect.EnumDescriptor {
	return file_tetragon_tetragon_proto_enumTypes[2].Descriptor()
}

func (HealthStatusResult) Type() protoreflect.EnumType {
	return &file_tetragon_tetragon_proto_enumTypes[2]
}

func (x HealthStatusResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatusResult.Descriptor instead.
func (HealthStatusResult) EnumDescriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{2}
}

type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Start time of the container.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// PID in the container namespace.
	Pid *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=pid,proto3" json:"pid,omitempty"`
	// If this is set true, it means that the process might have been originated from
	// a Kubernetes exec probe. For this field to be true, the following must be true:
	// 1. The binary field matches the first element of the exec command list for either
	//    liveness or readiness probe excluding the basename. For example, "/bin/ls"
	//    and "ls" are considered a match.
	// 2. The arguments field exactly matches the rest of the exec command list.
	MaybeExecProbe bool `protobuf:"varint,13,opt,name=maybe_exec_probe,json=maybeExecProbe,proto3" json:"maybe_exec_probe,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{1}
}

func (x *Container) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Container) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Container) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Container) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Container) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Container) GetMaybeExecProbe() bool {
	if x != nil {
		return x.MaybeExecProbe
	}
	return false
}

type Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string     `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Labels    []string   `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
	Container *Container `protobuf:"bytes,4,opt,name=container,proto3" json:"container,omitempty"`
	// pod_labels field contains all the labels of the pod. Note that the labels field
	// contains Cilium identity labels, which is a subset of pod labels.
	PodLabels map[string]string `protobuf:"bytes,5,rep,name=pod_labels,json=podLabels,proto3" json:"pod_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Pod) Reset() {
	*x = Pod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pod) ProtoMessage() {}

func (x *Pod) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pod.ProtoReflect.Descriptor instead.
func (*Pod) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{2}
}

func (x *Pod) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pod) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Pod) GetContainer() *Container {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *Pod) GetPodLabels() map[string]string {
	if x != nil {
		return x.PodLabels
	}
	return nil
}

type Capabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permitted   []CapabilitiesType `protobuf:"varint,1,rep,packed,name=permitted,proto3,enum=tetragon.CapabilitiesType" json:"permitted,omitempty"`
	Effective   []CapabilitiesType `protobuf:"varint,2,rep,packed,name=effective,proto3,enum=tetragon.CapabilitiesType" json:"effective,omitempty"`
	Inheritable []CapabilitiesType `protobuf:"varint,3,rep,packed,name=inheritable,proto3,enum=tetragon.CapabilitiesType" json:"inheritable,omitempty"`
}

func (x *Capabilities) Reset() {
	*x = Capabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capabilities) ProtoMessage() {}

func (x *Capabilities) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capabilities.ProtoReflect.Descriptor instead.
func (*Capabilities) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{3}
}

func (x *Capabilities) GetPermitted() []CapabilitiesType {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *Capabilities) GetEffective() []CapabilitiesType {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *Capabilities) GetInheritable() []CapabilitiesType {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inum   uint32 `protobuf:"varint,1,opt,name=inum,proto3" json:"inum,omitempty"`
	IsHost bool   `protobuf:"varint,2,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{4}
}

func (x *Namespace) GetInum() uint32 {
	if x != nil {
		return x.Inum
	}
	return 0
}

func (x *Namespace) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

type Namespaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uts             *Namespace `protobuf:"bytes,1,opt,name=uts,proto3" json:"uts,omitempty"`
	Ipc             *Namespace `protobuf:"bytes,2,opt,name=ipc,proto3" json:"ipc,omitempty"`
	Mnt             *Namespace `protobuf:"bytes,3,opt,name=mnt,proto3" json:"mnt,omitempty"`
	Pid             *Namespace `protobuf:"bytes,4,opt,name=pid,proto3" json:"pid,omitempty"`
	PidForChildren  *Namespace `protobuf:"bytes,5,opt,name=pid_for_children,json=pidForChildren,proto3" json:"pid_for_children,omitempty"`
	Net             *Namespace `protobuf:"bytes,6,opt,name=net,proto3" json:"net,omitempty"`
	Time            *Namespace `protobuf:"bytes,7,opt,name=time,proto3" json:"time,omitempty"`
	TimeForChildren *Namespace `protobuf:"bytes,8,opt,name=time_for_children,json=timeForChildren,proto3" json:"time_for_children,omitempty"`
	Cgroup          *Namespace `protobuf:"bytes,9,opt,name=cgroup,proto3" json:"cgroup,omitempty"`
	User            *Namespace `protobuf:"bytes,10,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *Namespaces) Reset() {
	*x = Namespaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespaces) ProtoMessage() {}

func (x *Namespaces) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespaces.ProtoReflect.Descriptor instead.
func (*Namespaces) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{5}
}

func (x *Namespaces) GetUts() *Namespace {
	if x != nil {
		return x.Uts
	}
	return nil
}

func (x *Namespaces) GetIpc() *Namespace {
	if x != nil {
		return x.Ipc
	}
	return nil
}

func (x *Namespaces) GetMnt() *Namespace {
	if x != nil {
		return x.Mnt
	}
	return nil
}

func (x *Namespaces) GetPid() *Namespace {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Namespaces) GetPidForChildren() *Namespace {
	if x != nil {
		return x.PidForChildren
	}
	return nil
}

func (x *Namespaces) GetNet() *Namespace {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *Namespaces) GetTime() *Namespace {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Namespaces) GetTimeForChildren() *Namespace {
	if x != nil {
		return x.TimeForChildren
	}
	return nil
}

func (x *Namespaces) GetCgroup() *Namespace {
	if x != nil {
		return x.Cgroup
	}
	return nil
}

func (x *Namespaces) GetUser() *Namespace {
	if x != nil {
		return x.User
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Exec ID uniquely identifies the process over time across all the nodes in the cluster.
	ExecId       string                  `protobuf:"bytes,1,opt,name=exec_id,json=execId,proto3" json:"exec_id,omitempty"`
	Pid          *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid          *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Cwd          string                  `protobuf:"bytes,4,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Binary       string                  `protobuf:"bytes,5,opt,name=binary,proto3" json:"binary,omitempty"`
	Arguments    string                  `protobuf:"bytes,6,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Flags        string                  `protobuf:"bytes,7,opt,name=flags,proto3" json:"flags,omitempty"`
	StartTime    *timestamppb.Timestamp  `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Auid         *wrapperspb.UInt32Value `protobuf:"bytes,9,opt,name=auid,proto3" json:"auid,omitempty"`
	Pod          *Pod                    `protobuf:"bytes,10,opt,name=pod,proto3" json:"pod,omitempty"`
	Docker       string                  `protobuf:"bytes,11,opt,name=docker,proto3" json:"docker,omitempty"`
	ParentExecId string                  `protobuf:"bytes,12,opt,name=parent_exec_id,json=parentExecId,proto3" json:"parent_exec_id,omitempty"`
	Refcnt       uint32                  `protobuf:"varint,13,opt,name=refcnt,proto3" json:"refcnt,omitempty"`
	Cap          *Capabilities           `protobuf:"bytes,14,opt,name=cap,proto3" json:"cap,omitempty"`
	Ns           *Namespaces             `protobuf:"bytes,15,opt,name=ns,proto3" json:"ns,omitempty"`
	DestPod      *Pod                    `protobuf:"bytes,16,opt,name=dest_pod,json=destPod,proto3" json:"dest_pod,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{6}
}

func (x *Process) GetExecId() string {
	if x != nil {
		return x.ExecId
	}
	return ""
}

func (x *Process) GetPid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Pid
	}
	return nil
}

func (x *Process) GetUid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uid
	}
	return nil
}

func (x *Process) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *Process) GetBinary() string {
	if x != nil {
		return x.Binary
	}
	return ""
}

func (x *Process) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *Process) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

func (x *Process) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Process) GetAuid() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Auid
	}
	return nil
}

func (x *Process) GetPod() *Pod {
	if x != nil {
		return x.Pod
	}
	return nil
}

func (x *Process) GetDocker() string {
	if x != nil {
		return x.Docker
	}
	return ""
}

func (x *Process) GetParentExecId() string {
	if x != nil {
		return x.ParentExecId
	}
	return ""
}

func (x *Process) GetRefcnt() uint32 {
	if x != nil {
		return x.Refcnt
	}
	return 0
}

func (x *Process) GetCap() *Capabilities {
	if x != nil {
		return x.Cap
	}
	return nil
}

func (x *Process) GetNs() *Namespaces {
	if x != nil {
		return x.Ns
	}
	return nil
}

func (x *Process) GetDestPod() *Pod {
	if x != nil {
		return x.DestPod
	}
	return nil
}

type ProcessExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	// Ancestors of the process beyond the immediate parent.
	Ancestors []*Process `protobuf:"bytes,3,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
}

func (x *ProcessExec) Reset() {
	*x = ProcessExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessExec) ProtoMessage() {}

func (x *ProcessExec) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessExec.ProtoReflect.Descriptor instead.
func (*ProcessExec) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessExec) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessExec) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessExec) GetAncestors() []*Process {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

type ProcessExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Signal  string   `protobuf:"bytes,3,opt,name=signal,proto3" json:"signal,omitempty"`
	Status  uint32   `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ProcessExit) Reset() {
	*x = ProcessExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessExit) ProtoMessage() {}

func (x *ProcessExit) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessExit.ProtoReflect.Descriptor instead.
func (*ProcessExit) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessExit) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessExit) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessExit) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

func (x *ProcessExit) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type KprobeSock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Family   string `protobuf:"bytes,1,opt,name=family,proto3" json:"family,omitempty"`
	Type     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Protocol string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Mark     uint32 `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
	Priority uint32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	Saddr    string `protobuf:"bytes,6,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr    string `protobuf:"bytes,7,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport    uint32 `protobuf:"varint,8,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport    uint32 `protobuf:"varint,9,opt,name=dport,proto3" json:"dport,omitempty"`
}

func (x *KprobeSock) Reset() {
	*x = KprobeSock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeSock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeSock) ProtoMessage() {}

func (x *KprobeSock) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeSock.ProtoReflect.Descriptor instead.
func (*KprobeSock) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{9}
}

func (x *KprobeSock) GetFamily() string {
	if x != nil {
		return x.Family
	}
	return ""
}

func (x *KprobeSock) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KprobeSock) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *KprobeSock) GetMark() uint32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *KprobeSock) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *KprobeSock) GetSaddr() string {
	if x != nil {
		return x.Saddr
	}
	return ""
}

func (x *KprobeSock) GetDaddr() string {
	if x != nil {
		return x.Daddr
	}
	return ""
}

func (x *KprobeSock) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *KprobeSock) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

type KprobeSkb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash        uint32 `protobuf:"varint,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Len         uint32 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	Priority    uint32 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Mark        uint32 `protobuf:"varint,4,opt,name=mark,proto3" json:"mark,omitempty"`
	Saddr       string `protobuf:"bytes,5,opt,name=saddr,proto3" json:"saddr,omitempty"`
	Daddr       string `protobuf:"bytes,6,opt,name=daddr,proto3" json:"daddr,omitempty"`
	Sport       uint32 `protobuf:"varint,7,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport       uint32 `protobuf:"varint,8,opt,name=dport,proto3" json:"dport,omitempty"`
	Proto       uint32 `protobuf:"varint,9,opt,name=proto,proto3" json:"proto,omitempty"`
	SecPathLen  uint32 `protobuf:"varint,10,opt,name=sec_path_len,json=secPathLen,proto3" json:"sec_path_len,omitempty"`
	SecPathOlen uint32 `protobuf:"varint,11,opt,name=sec_path_olen,json=secPathOlen,proto3" json:"sec_path_olen,omitempty"`
}

func (x *KprobeSkb) Reset() {
	*x = KprobeSkb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeSkb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeSkb) ProtoMessage() {}

func (x *KprobeSkb) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeSkb.ProtoReflect.Descriptor instead.
func (*KprobeSkb) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{10}
}

func (x *KprobeSkb) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *KprobeSkb) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *KprobeSkb) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *KprobeSkb) GetMark() uint32 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *KprobeSkb) GetSaddr() string {
	if x != nil {
		return x.Saddr
	}
	return ""
}

func (x *KprobeSkb) GetDaddr() string {
	if x != nil {
		return x.Daddr
	}
	return ""
}

func (x *KprobeSkb) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *KprobeSkb) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

func (x *KprobeSkb) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *KprobeSkb) GetSecPathLen() uint32 {
	if x != nil {
		return x.SecPathLen
	}
	return 0
}

func (x *KprobeSkb) GetSecPathOlen() uint32 {
	if x != nil {
		return x.SecPathOlen
	}
	return 0
}

type KprobePath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mount string `protobuf:"bytes,1,opt,name=mount,proto3" json:"mount,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Flags string `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *KprobePath) Reset() {
	*x = KprobePath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobePath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobePath) ProtoMessage() {}

func (x *KprobePath) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobePath.ProtoReflect.Descriptor instead.
func (*KprobePath) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{11}
}

func (x *KprobePath) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *KprobePath) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KprobePath) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

type KprobeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mount string `protobuf:"bytes,1,opt,name=mount,proto3" json:"mount,omitempty"`
	Path  string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Flags string `protobuf:"bytes,3,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *KprobeFile) Reset() {
	*x = KprobeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeFile) ProtoMessage() {}

func (x *KprobeFile) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeFile.ProtoReflect.Descriptor instead.
func (*KprobeFile) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{12}
}

func (x *KprobeFile) GetMount() string {
	if x != nil {
		return x.Mount
	}
	return ""
}

func (x *KprobeFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *KprobeFile) GetFlags() string {
	if x != nil {
		return x.Flags
	}
	return ""
}

type KprobeTruncatedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesArg []byte `protobuf:"bytes,1,opt,name=bytes_arg,json=bytesArg,proto3" json:"bytes_arg,omitempty"`
	OrigSize uint64 `protobuf:"varint,2,opt,name=orig_size,json=origSize,proto3" json:"orig_size,omitempty"`
}

func (x *KprobeTruncatedBytes) Reset() {
	*x = KprobeTruncatedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeTruncatedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeTruncatedBytes) ProtoMessage() {}

func (x *KprobeTruncatedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeTruncatedBytes.ProtoReflect.Descriptor instead.
func (*KprobeTruncatedBytes) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{13}
}

func (x *KprobeTruncatedBytes) GetBytesArg() []byte {
	if x != nil {
		return x.BytesArg
	}
	return nil
}

func (x *KprobeTruncatedBytes) GetOrigSize() uint64 {
	if x != nil {
		return x.OrigSize
	}
	return 0
}

type KprobeCred struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permitted   []CapabilitiesType `protobuf:"varint,1,rep,packed,name=permitted,proto3,enum=tetragon.CapabilitiesType" json:"permitted,omitempty"`
	Effective   []CapabilitiesType `protobuf:"varint,2,rep,packed,name=effective,proto3,enum=tetragon.CapabilitiesType" json:"effective,omitempty"`
	Inheritable []CapabilitiesType `protobuf:"varint,3,rep,packed,name=inheritable,proto3,enum=tetragon.CapabilitiesType" json:"inheritable,omitempty"`
}

func (x *KprobeCred) Reset() {
	*x = KprobeCred{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeCred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeCred) ProtoMessage() {}

func (x *KprobeCred) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeCred.ProtoReflect.Descriptor instead.
func (*KprobeCred) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{14}
}

func (x *KprobeCred) GetPermitted() []CapabilitiesType {
	if x != nil {
		return x.Permitted
	}
	return nil
}

func (x *KprobeCred) GetEffective() []CapabilitiesType {
	if x != nil {
		return x.Effective
	}
	return nil
}

func (x *KprobeCred) GetInheritable() []CapabilitiesType {
	if x != nil {
		return x.Inheritable
	}
	return nil
}

type KprobeCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *KprobeCapability) Reset() {
	*x = KprobeCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeCapability) ProtoMessage() {}

func (x *KprobeCapability) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeCapability.ProtoReflect.Descriptor instead.
func (*KprobeCapability) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{15}
}

func (x *KprobeCapability) GetValue() *wrapperspb.Int32Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *KprobeCapability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type KprobeUserNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level *wrapperspb.Int32Value  `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Owner *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Group *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Ns    *Namespace              `protobuf:"bytes,4,opt,name=ns,proto3" json:"ns,omitempty"`
}

func (x *KprobeUserNamespace) Reset() {
	*x = KprobeUserNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeUserNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeUserNamespace) ProtoMessage() {}

func (x *KprobeUserNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeUserNamespace.ProtoReflect.Descriptor instead.
func (*KprobeUserNamespace) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{16}
}

func (x *KprobeUserNamespace) GetLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *KprobeUserNamespace) GetOwner() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *KprobeUserNamespace) GetGroup() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *KprobeUserNamespace) GetNs() *Namespace {
	if x != nil {
		return x.Ns
	}
	return nil
}

type KprobeBpfAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProgType string `protobuf:"bytes,1,opt,name=ProgType,proto3" json:"ProgType,omitempty"`
	InsnCnt  uint32 `protobuf:"varint,2,opt,name=InsnCnt,proto3" json:"InsnCnt,omitempty"`
	ProgName string `protobuf:"bytes,3,opt,name=ProgName,proto3" json:"ProgName,omitempty"`
}

func (x *KprobeBpfAttr) Reset() {
	*x = KprobeBpfAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeBpfAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeBpfAttr) ProtoMessage() {}

func (x *KprobeBpfAttr) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeBpfAttr.ProtoReflect.Descriptor instead.
func (*KprobeBpfAttr) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{17}
}

func (x *KprobeBpfAttr) GetProgType() string {
	if x != nil {
		return x.ProgType
	}
	return ""
}

func (x *KprobeBpfAttr) GetInsnCnt() uint32 {
	if x != nil {
		return x.InsnCnt
	}
	return 0
}

func (x *KprobeBpfAttr) GetProgName() string {
	if x != nil {
		return x.ProgName
	}
	return ""
}

type KprobePerfEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KprobeFunc  string `protobuf:"bytes,1,opt,name=KprobeFunc,proto3" json:"KprobeFunc,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Config      uint64 `protobuf:"varint,3,opt,name=Config,proto3" json:"Config,omitempty"`
	ProbeOffset uint64 `protobuf:"varint,4,opt,name=ProbeOffset,proto3" json:"ProbeOffset,omitempty"`
}

func (x *KprobePerfEvent) Reset() {
	*x = KprobePerfEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobePerfEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobePerfEvent) ProtoMessage() {}

func (x *KprobePerfEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobePerfEvent.ProtoReflect.Descriptor instead.
func (*KprobePerfEvent) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{18}
}

func (x *KprobePerfEvent) GetKprobeFunc() string {
	if x != nil {
		return x.KprobeFunc
	}
	return ""
}

func (x *KprobePerfEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *KprobePerfEvent) GetConfig() uint64 {
	if x != nil {
		return x.Config
	}
	return 0
}

func (x *KprobePerfEvent) GetProbeOffset() uint64 {
	if x != nil {
		return x.ProbeOffset
	}
	return 0
}

type KprobeBpfMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapType    string `protobuf:"bytes,1,opt,name=MapType,proto3" json:"MapType,omitempty"`
	KeySize    uint32 `protobuf:"varint,2,opt,name=KeySize,proto3" json:"KeySize,omitempty"`
	ValueSize  uint32 `protobuf:"varint,3,opt,name=ValueSize,proto3" json:"ValueSize,omitempty"`
	MaxEntries uint32 `protobuf:"varint,4,opt,name=MaxEntries,proto3" json:"MaxEntries,omitempty"`
	MapName    string `protobuf:"bytes,5,opt,name=MapName,proto3" json:"MapName,omitempty"`
}

func (x *KprobeBpfMap) Reset() {
	*x = KprobeBpfMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeBpfMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeBpfMap) ProtoMessage() {}

func (x *KprobeBpfMap) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeBpfMap.ProtoReflect.Descriptor instead.
func (*KprobeBpfMap) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{19}
}

func (x *KprobeBpfMap) GetMapType() string {
	if x != nil {
		return x.MapType
	}
	return ""
}

func (x *KprobeBpfMap) GetKeySize() uint32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *KprobeBpfMap) GetValueSize() uint32 {
	if x != nil {
		return x.ValueSize
	}
	return 0
}

func (x *KprobeBpfMap) GetMaxEntries() uint32 {
	if x != nil {
		return x.MaxEntries
	}
	return 0
}

func (x *KprobeBpfMap) GetMapName() string {
	if x != nil {
		return x.MapName
	}
	return ""
}

type KprobeArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Arg:
	//	*KprobeArgument_StringArg
	//	*KprobeArgument_IntArg
	//	*KprobeArgument_SkbArg
	//	*KprobeArgument_SizeArg
	//	*KprobeArgument_BytesArg
	//	*KprobeArgument_PathArg
	//	*KprobeArgument_FileArg
	//	*KprobeArgument_TruncatedBytesArg
	//	*KprobeArgument_SockArg
	//	*KprobeArgument_CredArg
	//	*KprobeArgument_LongArg
	//	*KprobeArgument_BpfAttrArg
	//	*KprobeArgument_PerfEventArg
	//	*KprobeArgument_BpfMapArg
	//	*KprobeArgument_UintArg
	//	*KprobeArgument_UserNamespaceArg
	//	*KprobeArgument_CapabilityArg
	Arg isKprobeArgument_Arg `protobuf_oneof:"arg"`
}

func (x *KprobeArgument) Reset() {
	*x = KprobeArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KprobeArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KprobeArgument) ProtoMessage() {}

func (x *KprobeArgument) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KprobeArgument.ProtoReflect.Descriptor instead.
func (*KprobeArgument) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{20}
}

func (m *KprobeArgument) GetArg() isKprobeArgument_Arg {
	if m != nil {
		return m.Arg
	}
	return nil
}

func (x *KprobeArgument) GetStringArg() string {
	if x, ok := x.GetArg().(*KprobeArgument_StringArg); ok {
		return x.StringArg
	}
	return ""
}

func (x *KprobeArgument) GetIntArg() int32 {
	if x, ok := x.GetArg().(*KprobeArgument_IntArg); ok {
		return x.IntArg
	}
	return 0
}

func (x *KprobeArgument) GetSkbArg() *KprobeSkb {
	if x, ok := x.GetArg().(*KprobeArgument_SkbArg); ok {
		return x.SkbArg
	}
	return nil
}

func (x *KprobeArgument) GetSizeArg() uint64 {
	if x, ok := x.GetArg().(*KprobeArgument_SizeArg); ok {
		return x.SizeArg
	}
	return 0
}

func (x *KprobeArgument) GetBytesArg() []byte {
	if x, ok := x.GetArg().(*KprobeArgument_BytesArg); ok {
		return x.BytesArg
	}
	return nil
}

func (x *KprobeArgument) GetPathArg() *KprobePath {
	if x, ok := x.GetArg().(*KprobeArgument_PathArg); ok {
		return x.PathArg
	}
	return nil
}

func (x *KprobeArgument) GetFileArg() *KprobeFile {
	if x, ok := x.GetArg().(*KprobeArgument_FileArg); ok {
		return x.FileArg
	}
	return nil
}

func (x *KprobeArgument) GetTruncatedBytesArg() *KprobeTruncatedBytes {
	if x, ok := x.GetArg().(*KprobeArgument_TruncatedBytesArg); ok {
		return x.TruncatedBytesArg
	}
	return nil
}

func (x *KprobeArgument) GetSockArg() *KprobeSock {
	if x, ok := x.GetArg().(*KprobeArgument_SockArg); ok {
		return x.SockArg
	}
	return nil
}

func (x *KprobeArgument) GetCredArg() *KprobeCred {
	if x, ok := x.GetArg().(*KprobeArgument_CredArg); ok {
		return x.CredArg
	}
	return nil
}

func (x *KprobeArgument) GetLongArg() int64 {
	if x, ok := x.GetArg().(*KprobeArgument_LongArg); ok {
		return x.LongArg
	}
	return 0
}

func (x *KprobeArgument) GetBpfAttrArg() *KprobeBpfAttr {
	if x, ok := x.GetArg().(*KprobeArgument_BpfAttrArg); ok {
		return x.BpfAttrArg
	}
	return nil
}

func (x *KprobeArgument) GetPerfEventArg() *KprobePerfEvent {
	if x, ok := x.GetArg().(*KprobeArgument_PerfEventArg); ok {
		return x.PerfEventArg
	}
	return nil
}

func (x *KprobeArgument) GetBpfMapArg() *KprobeBpfMap {
	if x, ok := x.GetArg().(*KprobeArgument_BpfMapArg); ok {
		return x.BpfMapArg
	}
	return nil
}

func (x *KprobeArgument) GetUintArg() uint32 {
	if x, ok := x.GetArg().(*KprobeArgument_UintArg); ok {
		return x.UintArg
	}
	return 0
}

func (x *KprobeArgument) GetUserNamespaceArg() *KprobeUserNamespace {
	if x, ok := x.GetArg().(*KprobeArgument_UserNamespaceArg); ok {
		return x.UserNamespaceArg
	}
	return nil
}

func (x *KprobeArgument) GetCapabilityArg() *KprobeCapability {
	if x, ok := x.GetArg().(*KprobeArgument_CapabilityArg); ok {
		return x.CapabilityArg
	}
	return nil
}

type isKprobeArgument_Arg interface {
	isKprobeArgument_Arg()
}

type KprobeArgument_StringArg struct {
	StringArg string `protobuf:"bytes,1,opt,name=string_arg,json=stringArg,proto3,oneof"`
}

type KprobeArgument_IntArg struct {
	IntArg int32 `protobuf:"varint,2,opt,name=int_arg,json=intArg,proto3,oneof"`
}

type KprobeArgument_SkbArg struct {
	SkbArg *KprobeSkb `protobuf:"bytes,3,opt,name=skb_arg,json=skbArg,proto3,oneof"`
}

type KprobeArgument_SizeArg struct {
	SizeArg uint64 `protobuf:"varint,4,opt,name=size_arg,json=sizeArg,proto3,oneof"`
}

type KprobeArgument_BytesArg struct {
	BytesArg []byte `protobuf:"bytes,5,opt,name=bytes_arg,json=bytesArg,proto3,oneof"`
}

type KprobeArgument_PathArg struct {
	PathArg *KprobePath `protobuf:"bytes,6,opt,name=path_arg,json=pathArg,proto3,oneof"`
}

type KprobeArgument_FileArg struct {
	FileArg *KprobeFile `protobuf:"bytes,7,opt,name=file_arg,json=fileArg,proto3,oneof"`
}

type KprobeArgument_TruncatedBytesArg struct {
	TruncatedBytesArg *KprobeTruncatedBytes `protobuf:"bytes,8,opt,name=truncated_bytes_arg,json=truncatedBytesArg,proto3,oneof"`
}

type KprobeArgument_SockArg struct {
	SockArg *KprobeSock `protobuf:"bytes,9,opt,name=sock_arg,json=sockArg,proto3,oneof"`
}

type KprobeArgument_CredArg struct {
	CredArg *KprobeCred `protobuf:"bytes,10,opt,name=cred_arg,json=credArg,proto3,oneof"`
}

type KprobeArgument_LongArg struct {
	LongArg int64 `protobuf:"varint,11,opt,name=long_arg,json=longArg,proto3,oneof"`
}

type KprobeArgument_BpfAttrArg struct {
	BpfAttrArg *KprobeBpfAttr `protobuf:"bytes,12,opt,name=bpf_attr_arg,json=bpfAttrArg,proto3,oneof"`
}

type KprobeArgument_PerfEventArg struct {
	PerfEventArg *KprobePerfEvent `protobuf:"bytes,13,opt,name=perf_event_arg,json=perfEventArg,proto3,oneof"`
}

type KprobeArgument_BpfMapArg struct {
	BpfMapArg *KprobeBpfMap `protobuf:"bytes,14,opt,name=bpf_map_arg,json=bpfMapArg,proto3,oneof"`
}

type KprobeArgument_UintArg struct {
	UintArg uint32 `protobuf:"varint,15,opt,name=uint_arg,json=uintArg,proto3,oneof"`
}

type KprobeArgument_UserNamespaceArg struct {
	UserNamespaceArg *KprobeUserNamespace `protobuf:"bytes,16,opt,name=user_namespace_arg,json=userNamespaceArg,proto3,oneof"`
}

type KprobeArgument_CapabilityArg struct {
	CapabilityArg *KprobeCapability `protobuf:"bytes,17,opt,name=capability_arg,json=capabilityArg,proto3,oneof"`
}

func (*KprobeArgument_StringArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_IntArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SkbArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SizeArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_BytesArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_PathArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_FileArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_TruncatedBytesArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_SockArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_CredArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_LongArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_BpfAttrArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_PerfEventArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_BpfMapArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_UintArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_UserNamespaceArg) isKprobeArgument_Arg() {}

func (*KprobeArgument_CapabilityArg) isKprobeArgument_Arg() {}

type ProcessKprobe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process      *Process          `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent       *Process          `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	FunctionName string            `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Args         []*KprobeArgument `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Return       *KprobeArgument   `protobuf:"bytes,5,opt,name=return,proto3" json:"return,omitempty"`
	Action       KprobeAction      `protobuf:"varint,6,opt,name=action,proto3,enum=tetragon.KprobeAction" json:"action,omitempty"`
}

func (x *ProcessKprobe) Reset() {
	*x = ProcessKprobe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessKprobe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessKprobe) ProtoMessage() {}

func (x *ProcessKprobe) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessKprobe.ProtoReflect.Descriptor instead.
func (*ProcessKprobe) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{21}
}

func (x *ProcessKprobe) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessKprobe) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessKprobe) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *ProcessKprobe) GetArgs() []*KprobeArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ProcessKprobe) GetReturn() *KprobeArgument {
	if x != nil {
		return x.Return
	}
	return nil
}

func (x *ProcessKprobe) GetAction() KprobeAction {
	if x != nil {
		return x.Action
	}
	return KprobeAction_KPROBE_ACTION_UNKNOWN
}

type ProcessTracepoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Process *Process `protobuf:"bytes,1,opt,name=process,proto3" json:"process,omitempty"`
	Parent  *Process `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Subsys  string   `protobuf:"bytes,4,opt,name=subsys,proto3" json:"subsys,omitempty"`
	Event   string   `protobuf:"bytes,5,opt,name=event,proto3" json:"event,omitempty"`
	// TODO: once we implement all we want, rename KprobeArgument to GenericArgument
	Args []*KprobeArgument `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ProcessTracepoint) Reset() {
	*x = ProcessTracepoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTracepoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTracepoint) ProtoMessage() {}

func (x *ProcessTracepoint) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTracepoint.ProtoReflect.Descriptor instead.
func (*ProcessTracepoint) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{22}
}

func (x *ProcessTracepoint) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *ProcessTracepoint) GetParent() *Process {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *ProcessTracepoint) GetSubsys() string {
	if x != nil {
		return x.Subsys
	}
	return ""
}

func (x *ProcessTracepoint) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *ProcessTracepoint) GetArgs() []*KprobeArgument {
	if x != nil {
		return x.Args
	}
	return nil
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg0 uint64 `protobuf:"varint,1,opt,name=arg0,proto3" json:"arg0,omitempty"`
	Arg1 uint64 `protobuf:"varint,2,opt,name=arg1,proto3" json:"arg1,omitempty"`
	Arg2 uint64 `protobuf:"varint,3,opt,name=arg2,proto3" json:"arg2,omitempty"`
	Arg3 uint64 `protobuf:"varint,4,opt,name=arg3,proto3" json:"arg3,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{23}
}

func (x *Test) GetArg0() uint64 {
	if x != nil {
		return x.Arg0
	}
	return 0
}

func (x *Test) GetArg1() uint64 {
	if x != nil {
		return x.Arg1
	}
	return 0
}

func (x *Test) GetArg2() uint64 {
	if x != nil {
		return x.Arg2
	}
	return 0
}

func (x *Test) GetArg3() uint64 {
	if x != nil {
		return x.Arg3
	}
	return 0
}

type GetHealthStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSet []HealthStatusType `protobuf:"varint,1,rep,packed,name=event_set,json=eventSet,proto3,enum=tetragon.HealthStatusType" json:"event_set,omitempty"`
}

func (x *GetHealthStatusRequest) Reset() {
	*x = GetHealthStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusRequest) ProtoMessage() {}

func (x *GetHealthStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthStatusRequest.ProtoReflect.Descriptor instead.
func (*GetHealthStatusRequest) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{24}
}

func (x *GetHealthStatusRequest) GetEventSet() []HealthStatusType {
	if x != nil {
		return x.EventSet
	}
	return nil
}

type HealthStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event   HealthStatusType   `protobuf:"varint,1,opt,name=event,proto3,enum=tetragon.HealthStatusType" json:"event,omitempty"`
	Status  HealthStatusResult `protobuf:"varint,2,opt,name=status,proto3,enum=tetragon.HealthStatusResult" json:"status,omitempty"`
	Details string             `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{25}
}

func (x *HealthStatus) GetEvent() HealthStatusType {
	if x != nil {
		return x.Event
	}
	return HealthStatusType_HEALTH_STATUS_TYPE_UNDEF
}

func (x *HealthStatus) GetStatus() HealthStatusResult {
	if x != nil {
		return x.Status
	}
	return HealthStatusResult_HEALTH_STATUS_UNDEF
}

func (x *HealthStatus) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type GetHealthStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HealthStatus []*HealthStatus `protobuf:"bytes,1,rep,name=health_status,json=healthStatus,proto3" json:"health_status,omitempty"`
}

func (x *GetHealthStatusResponse) Reset() {
	*x = GetHealthStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tetragon_tetragon_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHealthStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHealthStatusResponse) ProtoMessage() {}

func (x *GetHealthStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tetragon_tetragon_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHealthStatusResponse.ProtoReflect.Descriptor instead.
func (*GetHealthStatusResponse) Descriptor() ([]byte, []int) {
	return file_tetragon_tetragon_proto_rawDescGZIP(), []int{26}
}

func (x *GetHealthStatusResponse) GetHealthStatus() []*HealthStatus {
	if x != nil {
		return x.HealthStatus
	}
	return nil
}

var File_tetragon_tetragon_proto protoreflect.FileDescriptor

var file_tetragon_tetragon_proto_rawDesc = []byte{
	0x0a, 0x17, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2f, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2b, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x79, 0x62, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x5f, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61,
	0x79, 0x62, 0x65, 0x45, 0x78, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x62, 0x65, 0x22, 0xfd, 0x01, 0x0a,
	0x03, 0x50, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x31,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x50, 0x6f, 0x64, 0x2e, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3c,
	0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a,
	0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x38, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x69, 0x6e, 0x75, 0x6d,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x75, 0x74, 0x73, 0x12,
	0x25, 0x0a, 0x03, 0x69, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x03, 0x69, 0x70, 0x63, 0x12, 0x25, 0x0a, 0x03, 0x6d, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x6d, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x03, 0x70, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x10, 0x70, 0x69, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0e, 0x70, 0x69, 0x64, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x06, 0x63, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x27, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0xbe, 0x04, 0x0a, 0x07, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12,
	0x2e, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x61, 0x75, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x70, 0x6f,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x03, 0x70, 0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x45, 0x78, 0x65, 0x63, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66,
	0x63, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x66, 0x63, 0x6e,
	0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x03, 0x63, 0x61, 0x70, 0x12, 0x24, 0x0a, 0x02, 0x6e,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x52, 0x02, 0x6e,
	0x73, 0x12, 0x28, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x64, 0x52, 0x07, 0x64, 0x65, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x78, 0x65, 0x63, 0x12, 0x2b, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdc, 0x01, 0x0a,
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x95, 0x02, 0x0a, 0x09,
	0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6b, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x61, 0x64, 0x64, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6f, 0x6c, 0x65, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x4f,
	0x6c, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x22, 0x4c, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x22,
	0x50, 0x0a, 0x14, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x41, 0x72, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x66,
	0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72,
	0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x59, 0x0a, 0x10, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x01,
	0x0a, 0x13, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x23, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x02, 0x6e, 0x73, 0x22, 0x61, 0x0a, 0x0d, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x42,
	0x70, 0x66, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x6e, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x73, 0x6e, 0x43, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x72, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x72, 0x6f, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x0f, 0x4b, 0x70, 0x72, 0x6f,
	0x62, 0x65, 0x50, 0x65, 0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x62, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x62, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x0c, 0x4b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x42, 0x70, 0x66, 0x4d, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x4d, 0x61, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d,
	0x61, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x06, 0x0a, 0x0e, 0x4b, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x12, 0x19, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x69,
	0x6e, 0x74, 0x41, 0x72, 0x67, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x6b, 0x62, 0x5f, 0x61, 0x72, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6b, 0x62, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x6b, 0x62, 0x41, 0x72, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x61, 0x72,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x41,
	0x72, 0x67, 0x12, 0x1d, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72,
	0x67, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x50, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x07, 0x70, 0x61, 0x74,
	0x68, 0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f,
	0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x41, 0x72, 0x67, 0x12, 0x50, 0x0a, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x6f, 0x63,
	0x6b, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x53, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b, 0x41, 0x72, 0x67, 0x12, 0x31, 0x0a, 0x08,
	0x63, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x43, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x63, 0x72, 0x65, 0x64, 0x41, 0x72, 0x67, 0x12,
	0x1b, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x6f, 0x6e, 0x67, 0x41, 0x72, 0x67, 0x12, 0x3b, 0x0a, 0x0c,
	0x62, 0x70, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70,
	0x72, 0x6f, 0x62, 0x65, 0x42, 0x70, 0x66, 0x41, 0x74, 0x74, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x62,
	0x70, 0x66, 0x41, 0x74, 0x74, 0x72, 0x41, 0x72, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x66, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x50, 0x65, 0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x70, 0x65, 0x72, 0x66, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x12, 0x38, 0x0a, 0x0b,
	0x62, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x42, 0x70, 0x66, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x09, 0x62, 0x70, 0x66,
	0x4d, 0x61, 0x70, 0x41, 0x72, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x61,
	0x72, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x75, 0x69, 0x6e, 0x74,
	0x41, 0x72, 0x67, 0x12, 0x4d, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x72, 0x67, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x61, 0x72, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74,
	0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x41, 0x72, 0x67, 0x42, 0x05, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x22, 0x9c,
	0x02, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65,
	0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x01,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x29, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x73, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x73, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x56, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61,
	0x72, 0x67, 0x30, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x61, 0x72, 0x67, 0x31, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x32, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x67, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x61, 0x72, 0x67, 0x33, 0x22,
	0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67, 0x6f, 0x6e,
	0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x65, 0x74, 0x72, 0x61, 0x67,
	0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x83, 0x02,
	0x0a, 0x0c, 0x4b, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x15, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x50, 0x52,
	0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x46, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x49, 0x47, 0x4b, 0x49, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x4b, 0x50, 0x52, 0x4f,
	0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x46, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45,
	0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x46, 0x44, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45,
	0x54, 0x55, 0x52, 0x4c, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x50, 0x52, 0x4f, 0x42, 0x45,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4e, 0x53, 0x4c, 0x4f, 0x4f, 0x4b, 0x55,
	0x50, 0x10, 0x08, 0x2a, 0x4f, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x45, 0x41, 0x4c, 0x54,
	0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x01, 0x2a, 0x7c, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tetragon_tetragon_proto_rawDescOnce sync.Once
	file_tetragon_tetragon_proto_rawDescData = file_tetragon_tetragon_proto_rawDesc
)

func file_tetragon_tetragon_proto_rawDescGZIP() []byte {
	file_tetragon_tetragon_proto_rawDescOnce.Do(func() {
		file_tetragon_tetragon_proto_rawDescData = protoimpl.X.CompressGZIP(file_tetragon_tetragon_proto_rawDescData)
	})
	return file_tetragon_tetragon_proto_rawDescData
}

var file_tetragon_tetragon_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tetragon_tetragon_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_tetragon_tetragon_proto_goTypes = []interface{}{
	(KprobeAction)(0),               // 0: tetragon.KprobeAction
	(HealthStatusType)(0),           // 1: tetragon.HealthStatusType
	(HealthStatusResult)(0),         // 2: tetragon.HealthStatusResult
	(*Image)(nil),                   // 3: tetragon.Image
	(*Container)(nil),               // 4: tetragon.Container
	(*Pod)(nil),                     // 5: tetragon.Pod
	(*Capabilities)(nil),            // 6: tetragon.Capabilities
	(*Namespace)(nil),               // 7: tetragon.Namespace
	(*Namespaces)(nil),              // 8: tetragon.Namespaces
	(*Process)(nil),                 // 9: tetragon.Process
	(*ProcessExec)(nil),             // 10: tetragon.ProcessExec
	(*ProcessExit)(nil),             // 11: tetragon.ProcessExit
	(*KprobeSock)(nil),              // 12: tetragon.KprobeSock
	(*KprobeSkb)(nil),               // 13: tetragon.KprobeSkb
	(*KprobePath)(nil),              // 14: tetragon.KprobePath
	(*KprobeFile)(nil),              // 15: tetragon.KprobeFile
	(*KprobeTruncatedBytes)(nil),    // 16: tetragon.KprobeTruncatedBytes
	(*KprobeCred)(nil),              // 17: tetragon.KprobeCred
	(*KprobeCapability)(nil),        // 18: tetragon.KprobeCapability
	(*KprobeUserNamespace)(nil),     // 19: tetragon.KprobeUserNamespace
	(*KprobeBpfAttr)(nil),           // 20: tetragon.KprobeBpfAttr
	(*KprobePerfEvent)(nil),         // 21: tetragon.KprobePerfEvent
	(*KprobeBpfMap)(nil),            // 22: tetragon.KprobeBpfMap
	(*KprobeArgument)(nil),          // 23: tetragon.KprobeArgument
	(*ProcessKprobe)(nil),           // 24: tetragon.ProcessKprobe
	(*ProcessTracepoint)(nil),       // 25: tetragon.ProcessTracepoint
	(*Test)(nil),                    // 26: tetragon.Test
	(*GetHealthStatusRequest)(nil),  // 27: tetragon.GetHealthStatusRequest
	(*HealthStatus)(nil),            // 28: tetragon.HealthStatus
	(*GetHealthStatusResponse)(nil), // 29: tetragon.GetHealthStatusResponse
	nil,                             // 30: tetragon.Pod.PodLabelsEntry
	(*timestamppb.Timestamp)(nil),   // 31: google.protobuf.Timestamp
	(*wrapperspb.UInt32Value)(nil),  // 32: google.protobuf.UInt32Value
	(CapabilitiesType)(0),           // 33: tetragon.CapabilitiesType
	(*wrapperspb.Int32Value)(nil),   // 34: google.protobuf.Int32Value
}
var file_tetragon_tetragon_proto_depIdxs = []int32{
	3,  // 0: tetragon.Container.image:type_name -> tetragon.Image
	31, // 1: tetragon.Container.start_time:type_name -> google.protobuf.Timestamp
	32, // 2: tetragon.Container.pid:type_name -> google.protobuf.UInt32Value
	4,  // 3: tetragon.Pod.container:type_name -> tetragon.Container
	30, // 4: tetragon.Pod.pod_labels:type_name -> tetragon.Pod.PodLabelsEntry
	33, // 5: tetragon.Capabilities.permitted:type_name -> tetragon.CapabilitiesType
	33, // 6: tetragon.Capabilities.effective:type_name -> tetragon.CapabilitiesType
	33, // 7: tetragon.Capabilities.inheritable:type_name -> tetragon.CapabilitiesType
	7,  // 8: tetragon.Namespaces.uts:type_name -> tetragon.Namespace
	7,  // 9: tetragon.Namespaces.ipc:type_name -> tetragon.Namespace
	7,  // 10: tetragon.Namespaces.mnt:type_name -> tetragon.Namespace
	7,  // 11: tetragon.Namespaces.pid:type_name -> tetragon.Namespace
	7,  // 12: tetragon.Namespaces.pid_for_children:type_name -> tetragon.Namespace
	7,  // 13: tetragon.Namespaces.net:type_name -> tetragon.Namespace
	7,  // 14: tetragon.Namespaces.time:type_name -> tetragon.Namespace
	7,  // 15: tetragon.Namespaces.time_for_children:type_name -> tetragon.Namespace
	7,  // 16: tetragon.Namespaces.cgroup:type_name -> tetragon.Namespace
	7,  // 17: tetragon.Namespaces.user:type_name -> tetragon.Namespace
	32, // 18: tetragon.Process.pid:type_name -> google.protobuf.UInt32Value
	32, // 19: tetragon.Process.uid:type_name -> google.protobuf.UInt32Value
	31, // 20: tetragon.Process.start_time:type_name -> google.protobuf.Timestamp
	32, // 21: tetragon.Process.auid:type_name -> google.protobuf.UInt32Value
	5,  // 22: tetragon.Process.pod:type_name -> tetragon.Pod
	6,  // 23: tetragon.Process.cap:type_name -> tetragon.Capabilities
	8,  // 24: tetragon.Process.ns:type_name -> tetragon.Namespaces
	5,  // 25: tetragon.Process.dest_pod:type_name -> tetragon.Pod
	9,  // 26: tetragon.ProcessExec.process:type_name -> tetragon.Process
	9,  // 27: tetragon.ProcessExec.parent:type_name -> tetragon.Process
	9,  // 28: tetragon.ProcessExec.ancestors:type_name -> tetragon.Process
	9,  // 29: tetragon.ProcessExit.process:type_name -> tetragon.Process
	9,  // 30: tetragon.ProcessExit.parent:type_name -> tetragon.Process
	33, // 31: tetragon.KprobeCred.permitted:type_name -> tetragon.CapabilitiesType
	33, // 32: tetragon.KprobeCred.effective:type_name -> tetragon.CapabilitiesType
	33, // 33: tetragon.KprobeCred.inheritable:type_name -> tetragon.CapabilitiesType
	34, // 34: tetragon.KprobeCapability.value:type_name -> google.protobuf.Int32Value
	34, // 35: tetragon.KprobeUserNamespace.level:type_name -> google.protobuf.Int32Value
	32, // 36: tetragon.KprobeUserNamespace.owner:type_name -> google.protobuf.UInt32Value
	32, // 37: tetragon.KprobeUserNamespace.group:type_name -> google.protobuf.UInt32Value
	7,  // 38: tetragon.KprobeUserNamespace.ns:type_name -> tetragon.Namespace
	13, // 39: tetragon.KprobeArgument.skb_arg:type_name -> tetragon.KprobeSkb
	14, // 40: tetragon.KprobeArgument.path_arg:type_name -> tetragon.KprobePath
	15, // 41: tetragon.KprobeArgument.file_arg:type_name -> tetragon.KprobeFile
	16, // 42: tetragon.KprobeArgument.truncated_bytes_arg:type_name -> tetragon.KprobeTruncatedBytes
	12, // 43: tetragon.KprobeArgument.sock_arg:type_name -> tetragon.KprobeSock
	17, // 44: tetragon.KprobeArgument.cred_arg:type_name -> tetragon.KprobeCred
	20, // 45: tetragon.KprobeArgument.bpf_attr_arg:type_name -> tetragon.KprobeBpfAttr
	21, // 46: tetragon.KprobeArgument.perf_event_arg:type_name -> tetragon.KprobePerfEvent
	22, // 47: tetragon.KprobeArgument.bpf_map_arg:type_name -> tetragon.KprobeBpfMap
	19, // 48: tetragon.KprobeArgument.user_namespace_arg:type_name -> tetragon.KprobeUserNamespace
	18, // 49: tetragon.KprobeArgument.capability_arg:type_name -> tetragon.KprobeCapability
	9,  // 50: tetragon.ProcessKprobe.process:type_name -> tetragon.Process
	9,  // 51: tetragon.ProcessKprobe.parent:type_name -> tetragon.Process
	23, // 52: tetragon.ProcessKprobe.args:type_name -> tetragon.KprobeArgument
	23, // 53: tetragon.ProcessKprobe.return:type_name -> tetragon.KprobeArgument
	0,  // 54: tetragon.ProcessKprobe.action:type_name -> tetragon.KprobeAction
	9,  // 55: tetragon.ProcessTracepoint.process:type_name -> tetragon.Process
	9,  // 56: tetragon.ProcessTracepoint.parent:type_name -> tetragon.Process
	23, // 57: tetragon.ProcessTracepoint.args:type_name -> tetragon.KprobeArgument
	1,  // 58: tetragon.GetHealthStatusRequest.event_set:type_name -> tetragon.HealthStatusType
	1,  // 59: tetragon.HealthStatus.event:type_name -> tetragon.HealthStatusType
	2,  // 60: tetragon.HealthStatus.status:type_name -> tetragon.HealthStatusResult
	28, // 61: tetragon.GetHealthStatusResponse.health_status:type_name -> tetragon.HealthStatus
	62, // [62:62] is the sub-list for method output_type
	62, // [62:62] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_tetragon_tetragon_proto_init() }
func file_tetragon_tetragon_proto_init() {
	if File_tetragon_tetragon_proto != nil {
		return
	}
	file_tetragon_capabilities_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tetragon_tetragon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Container); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeSock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeSkb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobePath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeTruncatedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeCred); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeUserNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeBpfAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobePerfEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeBpfMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KprobeArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessKprobe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTracepoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tetragon_tetragon_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHealthStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tetragon_tetragon_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*KprobeArgument_StringArg)(nil),
		(*KprobeArgument_IntArg)(nil),
		(*KprobeArgument_SkbArg)(nil),
		(*KprobeArgument_SizeArg)(nil),
		(*KprobeArgument_BytesArg)(nil),
		(*KprobeArgument_PathArg)(nil),
		(*KprobeArgument_FileArg)(nil),
		(*KprobeArgument_TruncatedBytesArg)(nil),
		(*KprobeArgument_SockArg)(nil),
		(*KprobeArgument_CredArg)(nil),
		(*KprobeArgument_LongArg)(nil),
		(*KprobeArgument_BpfAttrArg)(nil),
		(*KprobeArgument_PerfEventArg)(nil),
		(*KprobeArgument_BpfMapArg)(nil),
		(*KprobeArgument_UintArg)(nil),
		(*KprobeArgument_UserNamespaceArg)(nil),
		(*KprobeArgument_CapabilityArg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tetragon_tetragon_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tetragon_tetragon_proto_goTypes,
		DependencyIndexes: file_tetragon_tetragon_proto_depIdxs,
		EnumInfos:         file_tetragon_tetragon_proto_enumTypes,
		MessageInfos:      file_tetragon_tetragon_proto_msgTypes,
	}.Build()
	File_tetragon_tetragon_proto = out.File
	file_tetragon_tetragon_proto_rawDesc = nil
	file_tetragon_tetragon_proto_goTypes = nil
	file_tetragon_tetragon_proto_depIdxs = nil
}
