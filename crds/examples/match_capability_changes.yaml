# In this demo we will show hot to capture a change in capabilities with FGS.
# A change in capabilities can be done in 2 ways: (1) The normal path in Linux
# kernel using the approriate system calls and (2) via an exploit.
#
# In this demo we will show the first way. As the easy path is to remove
# capabilities (instead of adding) we will start a process with CAP_SETUID
# enabled, we will remove that during the execution and then we will capture
# this change using the following CRD.
#
# ** Preparation **
# We will add CAP_SETUID to the python executable. Next, from a python program we
# will remove that.
# Commands:
# $ getcap -r /usr/bin/ 2> /dev/null | grep python3 # check the capabilities of python3 binary
# $ which python3 # check the executable path
# /usr/bin/python3
# $ ls -la /usr/bin/python3 # check if the executable path is a symlink as we cannot apply capabilities in symlinks
# lrwxrwxrwx 1 root root 9 Mar 13  2020 /usr/bin/python3 -> python3.8
# $ sudo setcap 'cap_setuid+ep' /usr/bin/python3.8 # add CAP_SETUID in effective and permitted sets of caps for python3.8 binary
# $ getcap -r /usr/bin/ 2> /dev/null | grep python3 # check the capabilities of python3 binary
# /usr/bin/python3.8 = cap_setuid+ep
# $ sudo apt-get install -y python3-prctl # we will need this packet to change the caps from python3
#
# ** Execution **
# We will use 2 terminals. Terminal 1 will run FGS and terminal 2 the demo
# code. First thing is replace {{.Pid}} in this CRD with the PID of terminal 2.
#
# In terminal 1:
# $ sudo ./tetragon --btf /sys/kernel/btf/vmlinux  --bpf-lib ./bpf/objs/ --export-filename events.json --config-file crds/examples/match_capability_changes.yaml --enable-process-cred
# $ # <wait for events> (i.e. run the commands in terminal 2)
# $ # kill tetragon
# $ grep kprobe events.json | grep \"__x64_sys_write\" | grep strange | jq . # get the write kprobe events
#
# In terminal 2:
# $ /usr/bin/python3.8 -c "import os; import prctl; f = open('./strange.txt', 'w'); prctl.cap_effective.setuid = False; f.write('testdata'); f.close();"
#
# Because of the transition from having CAP_SETUID to removing CAP_SETUID, we will
# see a single kprobe event that does not contain CAP_SETUID in the effective
# set of its caps. On the other hand, it will contain CAP_SETUID in the permitted
# set of its caps. Initially we added CAP_SETUID both in effective and permitted
# sets of caps. In our python program we removed CAP_SETUID only for effective set
# of caps. We can check the appropriate process_exec event thta we had CAP_SETUID
# at the beginning.
#
# ** Cleanup **
# We have to remove CAP_SETUID from python executable.
# $ sudo setcap -r /usr/bin/python3.8 # remove all capabilities from python
# $ getcap -r /usr/bin/ 2> /dev/null | grep python3 # check the capabilities of python3 binary
#
# This CRD will also capture the changes when we enable a capability.
#
apiVersion: cilium.io/v1alpha1
kind: TracingPolicy
metadata:
  name: "fd_install"
spec:
  kprobes:
  - call: "fd_install"
    syscall: false
    return: false
    args:
    - index: 0
      type: int
    - index: 1
      type: "file"
    selectors:
    - matchPIDs:
      - operator: In
        followForks: true
        isNamespacePID: false
        values:
        - {{.Pid}}
      matchArgs:
      - index: 1
        operator: "Postfix"
        values:
        - "strange.txt"
      matchActions:
      - action: FollowFD
        argFd: 0
        argName: 1
  - call: "__x64_sys_write"
    syscall: true
    args:
    - index: 0
      type: "fd"
    - index: 1
      type: "char_buf"
      returnCopy: true
    - index: 2
      type: "size_t"
    selectors:
    - matchPIDs:
      - operator: In
        followForks: true
        isNamespacePID: false
        values:
        - {{.Pid}}
      matchCapabilityChanges:
      - type: Effective
        operator: In
        isNamespaceCapability: false
        values:
        - "CAP_SETUID"
      matchArgs:
      - index: 0
        operator: "Postfix"
        values:
        - "strange.txt"
